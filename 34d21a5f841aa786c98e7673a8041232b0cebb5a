{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8beaec92_049da6cb",
        "filename": "kleaf/impl/BUILD.bazel",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1961395
      },
      "writtenOn": "2023-07-06T12:14:16Z",
      "side": 1,
      "message": "`kleaf/impl/defconfig_fragment_selector.bzl`?",
      "range": {
        "startLine": 53,
        "startChar": 9,
        "endLine": 53,
        "endChar": 52
      },
      "revId": "34d21a5f841aa786c98e7673a8041232b0cebb5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d6d29c7_b671a0b3",
        "filename": "kleaf/impl/BUILD.bazel",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-07-07T21:43:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8beaec92_049da6cb",
      "range": {
        "startLine": 53,
        "startChar": 9,
        "endLine": 53,
        "endChar": 52
      },
      "revId": "34d21a5f841aa786c98e7673a8041232b0cebb5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98ef5fa8_d8d82d0d",
        "filename": "kleaf/impl/defconfig_fragment_selector.bzl",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1961395
      },
      "writtenOn": "2023-07-06T12:14:16Z",
      "side": 1,
      "message": "TIL.",
      "range": {
        "startLine": 40,
        "startChar": 22,
        "endLine": 40,
        "endChar": 45
      },
      "revId": "34d21a5f841aa786c98e7673a8041232b0cebb5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "523ee9ca_f6eb3922",
        "filename": "kleaf/impl/defconfig_fragment_selector.bzl",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1956160
      },
      "writtenOn": "2023-07-06T11:37:41Z",
      "side": 1,
      "message": "Why not the other way around, like \"select\"? From value of flag to files.",
      "revId": "34d21a5f841aa786c98e7673a8041232b0cebb5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b310771_9af3a20b",
        "filename": "kleaf/impl/defconfig_fragment_selector.bzl",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1961395
      },
      "writtenOn": "2023-07-06T12:44:15Z",
      "side": 1,
      "message": "(just a guess) It\u0027s a limitation of `label_keyed_string_dict` [0].\n\nAs to why not use `select` [1] directly? I\u0027m not sure.\n\n[0] https://bazel.build/rules/lib/toplevel/attr#label_keyed_string_dict\n[1] https://bazel.build/reference/be/functions#select",
      "parentUuid": "523ee9ca_f6eb3922",
      "revId": "34d21a5f841aa786c98e7673a8041232b0cebb5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c14c4589_3d149746",
        "filename": "kleaf/impl/defconfig_fragment_selector.bzl",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-07-06T18:48:49Z",
      "side": 1,
      "message": "yeah we don\u0027t have str -\u003e list[Label] attribute ðŸ˜ž so I can only do this. This is an implementation detail, not a public API though.\n\nI do not use `select` here because I need to support `transforms`; that is, when `kernel_build` specifies an attribute, then the attribute would be used if the flag is set to `\"default\"`.\n\nFor example:\n\n- If kernel_build.lto \u003d thin:\n  - If building with --lto\u003ddefault: final setting is thin LTO\n  - If building with --lto\u003dfull: final setting is full LTO\n- If kernel_build.lto \u003d None:\n  - If building with --lto\u003ddefault: final setting is default LTO (no defconfig fragments)\n  - If building with --lto\u003dfull: final setting is full LTO\n  \n`transforms` is needed to map attributes to files without reading it in the loading phase (during macro expansion).  \n\nSee go/kleaf-flags-configuration",
      "parentUuid": "1b310771_9af3a20b",
      "revId": "34d21a5f841aa786c98e7673a8041232b0cebb5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}