{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9fc91c58_70e3a6b2",
        "filename": "build.sh",
        "patchSetId": 5
      },
      "lineNbr": 1126,
      "author": {
        "id": 1557540
      },
      "writtenOn": "2021-05-18T22:28:35Z",
      "side": 1,
      "message": "I checked this command and it does extract all the cpios (only when using the toybox cpio), but the N+1.cpio will overwrite any file that exists in N.cpio. So that means common files like plat_file_contexts, vendor_property_contexts, or default.prop are going to be overridden and only common files in the last vendor ramdisk that\u0027s listed in VENDOR_RAMDISK_BINARY is going to be used.\n\nIs that fine with you? If so, I would at least like this documented so that it\u0027s clear to the user that if multiple vendor ramdisks are used that the last one will take precedence.",
      "range": {
        "startLine": 1126,
        "startChar": 6,
        "endLine": 1126,
        "endChar": 49
      },
      "revId": "b894dd8490e7106bdcd9b17e455c0686f638897d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6f3e0da_3c007ff4",
        "filename": "build.sh",
        "patchSetId": 5
      },
      "lineNbr": 1126,
      "author": {
        "id": 1858345
      },
      "writtenOn": "2021-05-18T23:53:15Z",
      "side": 1,
      "message": "I\u0027ll make a note of it. BTW, this is the same behavior that kernel itself takes if you were to directly use concatenated CPIOs for your ramdisk.",
      "parentUuid": "9fc91c58_70e3a6b2",
      "range": {
        "startLine": 1126,
        "startChar": 6,
        "endLine": 1126,
        "endChar": 49
      },
      "revId": "b894dd8490e7106bdcd9b17e455c0686f638897d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "587b8080_9549962f",
        "filename": "build.sh",
        "patchSetId": 5
      },
      "lineNbr": 1126,
      "author": {
        "id": 1858345
      },
      "writtenOn": "2021-05-18T23:56:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a6f3e0da_3c007ff4",
      "range": {
        "startLine": 1126,
        "startChar": 6,
        "endLine": 1126,
        "endChar": 49
      },
      "revId": "b894dd8490e7106bdcd9b17e455c0686f638897d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ecbf9336_c8a739da",
        "filename": "build.sh",
        "patchSetId": 5
      },
      "lineNbr": 1126,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2021-05-19T10:16:50Z",
      "side": 1,
      "message": "If you\u0027re worried that de-archiving concatenated cpio might fail (for example when not building with the hermetic build tools, thus not using toybox cpio) then you can move this sub shell into the for loop...\n\n\nfor vendor_ramdisk_binary in ${VENDOR_RAMDISK_BINARY}; do\n  \u003cdecompress ${vendor_ramdisk_binary}\u003e\n\n  ( cd \"${MKBOOTIMG_RAMDISK_STAGING_DIR}\"\n    cpio -idu \u003c\"${uncompressed vendor_ramdisk_binary}\"\n  )\ndone\n\n( cd \"${MKBOOTIMG_RAMDISK_STAGING_DIR}\"\n  rm -rf lib/modules\n  eval ${VENDOR_RAMDISK_CMDS}\n)\n\n\nThis should work regardless of toybox or GNU cpio.",
      "parentUuid": "587b8080_9549962f",
      "range": {
        "startLine": 1126,
        "startChar": 6,
        "endLine": 1126,
        "endChar": 49
      },
      "revId": "b894dd8490e7106bdcd9b17e455c0686f638897d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e4bc7b4b_8d33584c",
        "filename": "build.sh",
        "patchSetId": 5
      },
      "lineNbr": 1126,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2021-05-19T10:25:21Z",
      "side": 1,
      "message": "It\u0027s just an advice, you can decide if you want to change it or keep it as is.",
      "parentUuid": "ecbf9336_c8a739da",
      "range": {
        "startLine": 1126,
        "startChar": 6,
        "endLine": 1126,
        "endChar": 49
      },
      "revId": "b894dd8490e7106bdcd9b17e455c0686f638897d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d332cc8_246fca88",
        "filename": "build.sh",
        "patchSetId": 5
      },
      "lineNbr": 1126,
      "author": {
        "id": 1539256
      },
      "writtenOn": "2021-05-19T16:14:12Z",
      "side": 1,
      "message": "I can update if you need to support building without the hermetic tools -- let me know if so.",
      "parentUuid": "e4bc7b4b_8d33584c",
      "range": {
        "startLine": 1126,
        "startChar": 6,
        "endLine": 1126,
        "endChar": 49
      },
      "revId": "b894dd8490e7106bdcd9b17e455c0686f638897d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b723438_7c471eb4",
        "filename": "build.sh",
        "patchSetId": 5
      },
      "lineNbr": 1126,
      "author": {
        "id": 1557540
      },
      "writtenOn": "2021-05-19T16:59:19Z",
      "side": 1,
      "message": "I think it\u0027s okay to keep as is. This patch shouldn\u0027t break backwards compatibility with builds that aren\u0027t hermetic and all future kernel builds should be using the hermetic toolchain.",
      "parentUuid": "8d332cc8_246fca88",
      "range": {
        "startLine": 1126,
        "startChar": 6,
        "endLine": 1126,
        "endChar": 49
      },
      "revId": "b894dd8490e7106bdcd9b17e455c0686f638897d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "036a764c_0009d9e2",
        "filename": "build.sh",
        "patchSetId": 5
      },
      "lineNbr": 1126,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2021-05-19T17:00:34Z",
      "side": 1,
      "message": "No, it\u0027s fine right now, no need to update.\n\nI think we (Google) always use hermetic build whenever possible. If this use case ever arise (support non-hermetic build) then we can just update the build rules then.",
      "parentUuid": "8d332cc8_246fca88",
      "range": {
        "startLine": 1126,
        "startChar": 6,
        "endLine": 1126,
        "endChar": 49
      },
      "revId": "b894dd8490e7106bdcd9b17e455c0686f638897d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9aeeeb5_27f6a1fc",
        "filename": "build.sh",
        "patchSetId": 5
      },
      "lineNbr": 1126,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2021-05-19T17:01:24Z",
      "side": 1,
      "message": "\u003e all future kernel builds should be using the hermetic toolchain\n\nGood to know this",
      "parentUuid": "036a764c_0009d9e2",
      "range": {
        "startLine": 1126,
        "startChar": 6,
        "endLine": 1126,
        "endChar": 49
      },
      "revId": "b894dd8490e7106bdcd9b17e455c0686f638897d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}