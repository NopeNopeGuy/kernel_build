{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0fbea282_08f98f26",
        "filename": "build.sh",
        "patchSetId": 1
      },
      "lineNbr": 958,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-08-31T18:39:03Z",
      "side": 1,
      "message": "THIS",
      "range": {
        "startLine": 958,
        "startChar": 4,
        "endLine": 958,
        "endChar": 25
      },
      "revId": "7d5155a534a4c19c16d1a63542050ae205c45d16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10e266eb_9c7b4a42",
        "filename": "kleaf/kernel.bzl",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2021-08-28T06:52:58Z",
      "side": 1,
      "message": "that makes vmlinux a mandatory output for kernel_build. another option could be to depend on kernel_build and pass the vmlinux file via provider. wdyt?  I am also ok with this approach as it simple and elegant and works probably in all cases.",
      "range": {
        "startLine": 158,
        "startChar": 31,
        "endLine": 158,
        "endChar": 38
      },
      "revId": "7d5155a534a4c19c16d1a63542050ae205c45d16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c1da4246_9acbcc9d",
        "filename": "kleaf/kernel.bzl",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-08-31T18:39:03Z",
      "side": 1,
      "message": "\u003e that makes vmlinux a mandatory output for kernel_build\n\nNope, generate_vmlinux_btf is false by default. It corresponds to the GENERATE_VMLINUX_BTF option on build.sh.\n\nFor example, for //common:kernel, generate_vmlinux_btf is not set.",
      "parentUuid": "10e266eb_9c7b4a42",
      "range": {
        "startLine": 158,
        "startChar": 31,
        "endLine": 158,
        "endChar": 38
      },
      "revId": "7d5155a534a4c19c16d1a63542050ae205c45d16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b016c8cc_3c923485",
        "filename": "kleaf/kernel.bzl",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-08-31T18:55:55Z",
      "side": 1,
      "message": "Because it is a flag to build.sh, maybe it should be a flag to the `bazel build` command like what we did for LTO?\n\nIf so, then I get what you mean. The solution is to make the dependency optional by using select():\n\nhttps://docs.bazel.build/versions/main/be/functions.html#select",
      "parentUuid": "c1da4246_9acbcc9d",
      "range": {
        "startLine": 158,
        "startChar": 31,
        "endLine": 158,
        "endChar": 38
      },
      "revId": "7d5155a534a4c19c16d1a63542050ae205c45d16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f05a5b8_f92f5cf4",
        "filename": "kleaf/kernel.bzl",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2021-08-31T19:47:24Z",
      "side": 1,
      "message": "I meant you are depending on the name \u0027vmlinux\u0027. we should rather pass the kernel image file name via provider I thought. \n\nbut I would not make this optional per flag. I would leave it as you have it now.",
      "parentUuid": "b016c8cc_3c923485",
      "range": {
        "startLine": 158,
        "startChar": 31,
        "endLine": 158,
        "endChar": 38
      },
      "revId": "7d5155a534a4c19c16d1a63542050ae205c45d16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "966f14cc_e53b1f62",
        "filename": "kleaf/kernel.bzl",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-09-01T02:23:06Z",
      "side": 1,
      "message": "If you don\u0027t mean to make this a command-line flag, then I think what I have right now works better.\n\nIf a `kernel_build` doesn\u0027t have `vmlinux` in `outs`, then it shouldn\u0027t define `generate_vmlinux_btf`, otherwise Bazel will complain as expected.\n\nThis is actually cleaner than the provider. With the provider approach, I\u0027ll need (pseudocode):\n\n```\ndef _kernel_build_impl(ctx):\n  ...\n  return KernelBuildInfo(..., vmlinux \u003d name + \"/vmlinux\" if \"vmlinux\" in ctx.attr.outs else None)\n\ndef _vmlinux_btf_impl(ctx):\n  ...\n  vmlinux \u003d ctx.attr.kernel_build[KernelBuildInfo].vmlinux\n  if vmlinux \u003d\u003d None:\n    fail()\n```\n\nFor example, which is pretty dirty IMO.",
      "parentUuid": "1f05a5b8_f92f5cf4",
      "range": {
        "startLine": 158,
        "startChar": 31,
        "endLine": 158,
        "endChar": 38
      },
      "revId": "7d5155a534a4c19c16d1a63542050ae205c45d16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e25620f_16e0000e",
        "filename": "kleaf/kernel.bzl",
        "patchSetId": 1
      },
      "lineNbr": 163,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2021-08-28T06:50:25Z",
      "side": 1,
      "message": "this needs to conditionally go into dist as well",
      "revId": "7d5155a534a4c19c16d1a63542050ae205c45d16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8836e39a_0960b8d3",
        "filename": "kleaf/kernel.bzl",
        "patchSetId": 1
      },
      "lineNbr": 163,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-08-31T19:25:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2e25620f_16e0000e",
      "revId": "7d5155a534a4c19c16d1a63542050ae205c45d16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ea40403_da35bd1c",
        "filename": "kleaf/kernel.bzl",
        "patchSetId": 1
      },
      "lineNbr": 1106,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2021-08-28T06:50:25Z",
      "side": 1,
      "message": "should that not only be set in the KernelEnv setup? maybe a debug leftover?",
      "range": {
        "startLine": 1106,
        "startChar": 51,
        "endLine": 1106,
        "endChar": 62
      },
      "revId": "7d5155a534a4c19c16d1a63542050ae205c45d16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a33ce6c2_0883bab8",
        "filename": "kleaf/kernel.bzl",
        "patchSetId": 1
      },
      "lineNbr": 1106,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-09-01T02:23:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7ea40403_da35bd1c",
      "range": {
        "startLine": 1106,
        "startChar": 51,
        "endLine": 1106,
        "endChar": 62
      },
      "revId": "7d5155a534a4c19c16d1a63542050ae205c45d16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5c75b37_3f0a28df",
        "filename": "kleaf/kernel.bzl",
        "patchSetId": 1
      },
      "lineNbr": 1110,
      "author": {
        "id": 1625880
      },
      "writtenOn": "2021-08-29T18:30:08Z",
      "side": 1,
      "message": "I think this recipe differs greatly from what is actually done by the kernel linker script (which is pahole -J on a temporary copy, extract .BTF section, re-link kernel from scratch including the new section).\n\nNow, for the purposes of ABI extraction, pahole -J is fine. However, the resulting kernel may not be well-formed (or why would the linker script do such elaborate things?).",
      "range": {
        "startLine": 1107,
        "startChar": 0,
        "endLine": 1110,
        "endChar": 52
      },
      "revId": "7d5155a534a4c19c16d1a63542050ae205c45d16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df6ac5dc_22a519f2",
        "filename": "kleaf/kernel.bzl",
        "patchSetId": 1
      },
      "lineNbr": 1110,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-08-31T18:39:03Z",
      "side": 1,
      "message": "I copied this from build.sh.\n\nWhat do you suggest, Giuliano?",
      "parentUuid": "e5c75b37_3f0a28df",
      "range": {
        "startLine": 1107,
        "startChar": 0,
        "endLine": 1110,
        "endChar": 52
      },
      "revId": "7d5155a534a4c19c16d1a63542050ae205c45d16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1936c470_c30768df",
        "filename": "kleaf/kernel.bzl",
        "patchSetId": 1
      },
      "lineNbr": 1110,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2021-08-31T19:47:24Z",
      "side": 1,
      "message": "I think for ABI analysis this is fine for the moment. for anything else that BTF is good for this will likely not work.",
      "parentUuid": "df6ac5dc_22a519f2",
      "range": {
        "startLine": 1107,
        "startChar": 0,
        "endLine": 1110,
        "endChar": 52
      },
      "revId": "7d5155a534a4c19c16d1a63542050ae205c45d16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}