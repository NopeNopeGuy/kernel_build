{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a5ab523e_ef57154b",
        "filename": "kleaf/impl/image/image_utils.bzl",
        "patchSetId": 20
      },
      "lineNbr": 48,
      "author": {
        "id": 1961395
      },
      "writtenOn": "2022-08-09T22:49:35Z",
      "side": 1,
      "message": "Nit: Here and in kleaf/impl/image/system_dlkm_image.bzl: I understand Starlark is not python but also that it\u0027s recommended to follow the python guidelines when possible. So, should we follow http://go/pystyle#s2.14-truefalse-evaluations and use the implicit false when possible combined with the not[0] operator?\n\n[0]: https://github.com/bazelbuild/starlark/blob/master/spec.md#unary-operators",
      "range": {
        "startLine": 48,
        "startChar": 7,
        "endLine": 48,
        "endChar": 38
      },
      "revId": "92743ee505693cbd2207888611cc5c7b4fb73a00",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71e54098_c6e3be70",
        "filename": "kleaf/impl/image/image_utils.bzl",
        "patchSetId": 20
      },
      "lineNbr": 48,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-08-10T14:37:27Z",
      "side": 1,
      "message": "+1, I somewhat also really have a hard time agreeing with the default\u003dNone definition of boolean parameters. I probably asked that many times, but do we have a technical reason not to do `restore_modules_install \u003d True` in L31?",
      "parentUuid": "a5ab523e_ef57154b",
      "range": {
        "startLine": 48,
        "startChar": 7,
        "endLine": 48,
        "endChar": 38
      },
      "revId": "92743ee505693cbd2207888611cc5c7b4fb73a00",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c5e96313_83c89cac",
        "filename": "kleaf/impl/image/image_utils.bzl",
        "patchSetId": 20
      },
      "lineNbr": 48,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-08-10T19:17:22Z",
      "side": 1,
      "message": "To Ulises question: This is intentional to explicitly checking against `None` instead of casting to a boolean directly.\n\nFor example, if one specifies:\n\n```\ndef foo(x \u003d None):\n  if not x:\n    x \u003d True\n\nfoo(x \u003d False)\n```\n\n... then `x` is evaluated to True.\n\nTo Matthias question:\n\nThe main reason is consistency to the convention [1]. There are multiple good results from sticking to the convention from my experience.\n\nOne good thing about sticking to this convention is that the caller can safely assume that, if an attribute is not given to a macro, it is equivalent to setting it to \"None\". \n\nFor example, if one specifies\n```\ndef foo(x \u003d True): # a non-conventional macro\n   do(x)\n   \n# another caller\nfoo(x \u003d None if y else z) # Wrong! foo does not accept x \u003d None\n# The correct way to do this with this non-conventional foo function:\nfoo(**({} if y else {\"x\": z})\n# ... which is very complicated and counter-intuitive\n```\n\nIn \"another caller\", they would assume that specifying `x \u003d None` is equivalent to not setting the value, which uses the default, and the default is implementation defined. However, this is not the case, because `foo` does NOT follow the convention.\n\nNote: this is also consistent with Bazel rules [2]. If you provide `None` to an attribute, it will use the default value.\n\nThe other good thing is that it works nicely with the scripts and other batch operations. For example, in this script I am creating:\n\nhttps://android-review.googlesource.com/c/kernel/build/+/2172953/12/kleaf/build_config_to_bazel.py#436\n\nHere, `buildozer` requires an attribute to be PRESENT to add a comment to it. So, I can simply set the attribute to `None` if it is not present, then add the comment. However, if the default value is specified in the macro signature, then I cannot safely assume that setting to `None` is equivalent to not setting the attribute.\n\n[1] https://bazel.build/rules/macros\n[2] https://bazel.build/rules/rules",
      "parentUuid": "71e54098_c6e3be70",
      "range": {
        "startLine": 48,
        "startChar": 7,
        "endLine": 48,
        "endChar": 38
      },
      "revId": "92743ee505693cbd2207888611cc5c7b4fb73a00",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}