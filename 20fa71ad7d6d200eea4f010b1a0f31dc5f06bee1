{
  "comments": [
    {
      "key": {
        "uuid": "eb98bc64_ca7a2c1e",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "drop the .py from the filename after(!) the review has completed. As last action. Until then we can have the syntax highlighting here in Gerrit.",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc83c3dc_ee29816e",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Will do then.\nKeeping this unresolved until then.",
      "parentUuid": "eb98bc64_ca7a2c1e",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a468d4b9_f9e8f18d",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-24T00:24:17Z",
      "side": 1,
      "message": "unresolving",
      "parentUuid": "dc83c3dc_ee29816e",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2da3cd4_08aada69",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 1,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "#!/usr/bin/env python3",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "691f19cf_587a0040",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 1,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d2da3cd4_08aada69",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f61f0116_dbe8e60c",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 2,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "python docstrings start without a leading whitespace and end with a punctuation.\n\n \"\"\"kmi_defines .... build.\n\n    Something else\n \"\"\"\n\nThis needs to be consistently addressed throughout the whole file. Hence not repeating later.",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe1c87cb_2aeb5729",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 2,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "f61f0116_dbe8e60c",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cb4d917f_29a7f5a6",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 13,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "make this part of the doc string.",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6da523de_e5e60e73",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 13,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "cb4d917f_29a7f5a6",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7d0c2bf_c4310716",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 20,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "There",
      "range": {
        "startLine": 20,
        "startChar": 36,
        "endLine": 20,
        "endChar": 39
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c02918f2_422b377f",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 20,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "e7d0c2bf_c4310716",
      "range": {
        "startLine": 20,
        "startChar": 36,
        "endLine": 20,
        "endChar": 39
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ca90124_611e816b",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 21,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "I am not sure we need this comment here, but I will respond to it: In my experience it was already a big gain by annotating parameter types and return types. I am usually not annotating local variables. If their type cannot be deducted by a human from either the context, the parameter types or a comment clarifying that case, the function has a complexity problem anyway.",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89c56462_4283cd76",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 21,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Thanks. Addressed enough I think. See comment.",
      "parentUuid": "8ca90124_611e816b",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a9602d69_71954fb1",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 24,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "typo in typing",
      "range": {
        "startLine": 24,
        "startChar": 35,
        "endLine": 24,
        "endChar": 42
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa96d559_e4a192e6",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 24,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "don\u0027t import it if you do not use it.",
      "range": {
        "startLine": 24,
        "startChar": 44,
        "endLine": 24,
        "endChar": 73
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71f766ab_ec46d30d",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 24,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Thanks.",
      "parentUuid": "a9602d69_71954fb1",
      "range": {
        "startLine": 24,
        "startChar": 35,
        "endLine": 24,
        "endChar": 42
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a7dec73_e961181d",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 24,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Its imported for typing, but the code doesn\u0027t use it otherwise. This is to make ptype happy.",
      "parentUuid": "fa96d559_e4a192e6",
      "range": {
        "startLine": 24,
        "startChar": 44,
        "endLine": 24,
        "endChar": 73
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a1bdcf3f_d14c912c",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 27,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "use the fully qualified versions of os.path.exists() and friends throughout the code. It increases readability form people being used to python by far and is not really verbose.",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d073a35_39952bff",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 27,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Done. Thanks.",
      "parentUuid": "a1bdcf3f_d14c912c",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10d4fee2_16dcacce",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 31,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "imports shall be sorted alphabetically",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "475ba8fb_2ea92359",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 31,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "10d4fee2_16dcacce",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "797658b2_e1643c9c",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 33,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "that is a good candidate for a command line option (see my argparse suggestion further down)",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 5
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50deef14_a9fb2ecd",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 33,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "that is fairly obvious",
      "range": {
        "startLine": 33,
        "startChar": 15,
        "endLine": 33,
        "endChar": 27
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cee00786_75132949",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 33,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Yep. Trying to stick with a style for all assignments (other than type: str, see above).",
      "parentUuid": "50deef14_a9fb2ecd",
      "range": {
        "startLine": 33,
        "startChar": 15,
        "endLine": 33,
        "endChar": 27
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63b1e99b_7e3c2c5c",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 33,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Will do later, left a TODO.",
      "parentUuid": "797658b2_e1643c9c",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 5
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0e9e474_1b8edf5f",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 34,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "probably worth a TODO to figure out the correct compiler. Depends a bit on the environment this is embedded in.",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 34,
        "endChar": 31
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44106e8b_876be5c1",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 34,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Left a TODO in the code. The TODO are highlighted by pylint3 which I run regularly with\nptype and yapf.",
      "parentUuid": "b0e9e474_1b8edf5f",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 34,
        "endChar": 31
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "21457687_60207a29",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 46,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "I do not see the point of this extension.\n\nIf you want a new named exception, \n\n  class ExitError(Exception):\n    pass\n\nshould do.  `e.get_message()` can be replaced by `e.message`\nIf you prefer hiding the implementation detail (which I do not see why), make message a @property.",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 46,
        "endChar": 27
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "927fd3ba_43c30f87",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 46,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Thanks. pylint3 didn\u0027t like the pass. The docstring is enough.",
      "parentUuid": "21457687_60207a29",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 46,
        "endChar": 27
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af1bf1bf_78bbdb23",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 49,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "I do not understand the need for the stop function.\n\nIf somebody actually calls stop(), you will see a raised exception at line 63 and not much more context other than what you hopefully have stored in *args.\n\nRather than calling stop(), why not propagate exceptions up the stack and either handle them or let them be fatal to the thread or the program.",
      "range": {
        "startLine": 49,
        "startChar": 4,
        "endLine": 49,
        "endChar": 8
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51ae137f_738e915d",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 49,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "Would the type not rather be Tuple[str] ?",
      "range": {
        "startLine": 49,
        "startChar": 16,
        "endLine": 49,
        "endChar": 19
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16701e65_582930fe",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 49,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Fixed. I would have ptype to catch these. Don\u0027t really know what ptype actually does.",
      "parentUuid": "51ae137f_738e915d",
      "range": {
        "startLine": 49,
        "startChar": 16,
        "endLine": 49,
        "endChar": 19
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5335581_f4e606c3",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 49,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Tried to explain it better in the comment.",
      "parentUuid": "af1bf1bf_78bbdb23",
      "range": {
        "startLine": 49,
        "startChar": 4,
        "endLine": 49,
        "endChar": 8
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e9dc7125_adc77499",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 53,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "why would you want to call exit() from another thread than the main thread?",
      "range": {
        "startLine": 53,
        "startChar": 24,
        "endLine": 53,
        "endChar": 30
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d60ee426_e73b17af",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 53,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "I am not calling exit() this comment was obsolete.",
      "parentUuid": "e9dc7125_adc77499",
      "range": {
        "startLine": 53,
        "startChar": 24,
        "endLine": 53,
        "endChar": 30
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12b3c05d_9335feeb",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 63,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "That is effectively\n\n  raise ExitError(\" \".join(args))",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 63,
        "endChar": 28
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82f0bb36_e7594106",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 63,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Thanks!",
      "parentUuid": "12b3c05d_9335feeb",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 63,
        "endChar": 28
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f10f29e_82fd2caf",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 94,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "please use logging instead\n\nhttps://docs.python.org/3.8/library/logging.html",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 94,
        "endChar": 38
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd4ff6e1_3be5eb3d",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 94,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Began using error logging, these remain to produce the errors that the user sees when the\nprogram is misused. Will deal with logging more later.",
      "parentUuid": "0f10f29e_82fd2caf",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 94,
        "endChar": 38
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e25ac8f_832a1ea5",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 97,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "that interface is a bit weird as the callers are effectively doing error handling around a string rather than an exception.\n\nHow about\n\n  def assert_valid_fir(file):\n    if not os.path.exists(file):\n      raise ValueError(\"file does not exist: {}\".format(file))\n    if not os.path.is_file(file):\n      raise ValueError(\"file is not a regular file: {}\".format(file))\n\nMaybe have a named exception for that (deriving from something suitable [1]).\nLet the callers explicitly handle the exception instead.\n\n[1] https://docs.python.org/3.5/library/exceptions.html?highlight\u003dexception#exception-hierarchy",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 97,
        "endChar": 35
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a008518f_604890d1",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 97,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Removed all the callers and the function too.",
      "parentUuid": "6e25ac8f_832a1ea5",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 97,
        "endChar": 35
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a732ce68_cb90cedd",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 110,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "that method is not used. also, callers would use os.chdir directly as you use it here, catching the correct exception (from the docs: \"This function can raise OSError and subclasses such as FileNotFoundError, PermissionError, and NotADirectoryError.\")",
      "range": {
        "startLine": 110,
        "startChar": 4,
        "endLine": 110,
        "endChar": 9
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "303c8290_48659b0a",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 110,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Removed.",
      "parentUuid": "a732ce68_cb90cedd",
      "range": {
        "startLine": 110,
        "startChar": 4,
        "endLine": 110,
        "endChar": 9
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4bd653d_182950c8",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 125,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "that comment is superfluous",
      "range": {
        "startLine": 125,
        "startChar": 34,
        "endLine": 125,
        "endChar": 70
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b437cf57_41ee86f6",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 125,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Until I learned about the auto-magic close I was not superfluous to me, removed it any",
      "parentUuid": "b4bd653d_182950c8",
      "range": {
        "startLine": 125,
        "startChar": 34,
        "endLine": 125,
        "endChar": 70
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2ebbcc1_f0768efc",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 125,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-24T00:24:17Z",
      "side": 1,
      "message": "well, the \u0027with\u0027 statement is a RAII implementation in Python that is quite commonly expected to safely dispose of the resources it acquires at the beginning of the block. independent of the how the scope is exited.",
      "parentUuid": "b437cf57_41ee86f6",
      "range": {
        "startLine": 125,
        "startChar": 34,
        "endLine": 125,
        "endChar": 70
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64d4b499_db1c27b0",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 128,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "Rather propagate this OSError, the resulting ExitError is not going to be helpful finding this issue.\n\nI would rather remove this function and replace the call sites with:\n\n  with open(name) as file:\n    myvar \u003d file.read()\n\nand possibly handle the exception if you can recover or let it propagate if you can\u0027t",
      "range": {
        "startLine": 127,
        "startChar": 4,
        "endLine": 128,
        "endChar": 49
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43396812_554d6103",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 128,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "readfile() is used in 6 places, I\u0027d rather have this encapsulated than inlining the code\nin multiple places.  Mapping the errors into a stop() raised exception means that this\ncould happen (file might be missing or unreadable), its not like calling a missing member\non an object (which the code wouldn\u0027t expect to be doing).\n\nPrinting the *args of the original exception too.",
      "parentUuid": "64d4b499_db1c27b0",
      "range": {
        "startLine": 127,
        "startChar": 4,
        "endLine": 128,
        "endChar": 49
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bc963890_734459a3",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 128,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-24T00:24:17Z",
      "side": 1,
      "message": "Again, you are hiding away the actual exception\u0027s context. If you anyway raise a new exception, you might as well just let the OSError propagate and all that is left is a readable\n\n   with open(name) as file:\n     myvar \u003d file.read()\n\nThat is fine to repeat in 6 locations. Also, since you are using python3 and pathlib anyway.\n\n   pathlib.Path(file).read_text()\n\n   https://docs.python.org/3/library/pathlib.html#pathlib.Path.read_text",
      "parentUuid": "43396812_554d6103",
      "range": {
        "startLine": 127,
        "startChar": 4,
        "endLine": 128,
        "endChar": 49
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f049fea_eeab3a03",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 135,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "replace by the above suggestion \u0027assert_file_exists\u0027 and let the exception thrown propagate.",
      "range": {
        "startLine": 131,
        "startChar": 0,
        "endLine": 135,
        "endChar": 27
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36b813c4_446d5f0d",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 135,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "All the errors that originate with the program (or triggered by the program directly) are\nraised via stop() makes it easy to debug, set breakpoints, etc.",
      "parentUuid": "9f049fea_eeab3a03",
      "range": {
        "startLine": 131,
        "startChar": 0,
        "endLine": 135,
        "endChar": 27
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6afc821e_a7f9b5b0",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 135,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-24T00:24:17Z",
      "side": 1,
      "message": "Sorry, I do not agree. If the error is triggered with stop it is already too late. The original exception is gone. You can estimate which one it is from the call stack of stop(), but you lose access to all the properties of the various exceptions. I don\u0027t see how this makes it easier to debug or easier to set break points.",
      "parentUuid": "36b813c4_446d5f0d",
      "range": {
        "startLine": 131,
        "startChar": 0,
        "endLine": 135,
        "endChar": 27
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89441706_035c5d3a",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 143,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "this function is used exactly once and I also do not see something special in this line that it can\u0027t be inlined in the original call site.",
      "range": {
        "startLine": 138,
        "startChar": 0,
        "endLine": 143,
        "endChar": 40
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e650b7a0_5acd683d",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 143,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "There might be more uses later, for example when deleting temporary files created by the\ncode yet to be rewritten.",
      "parentUuid": "89441706_035c5d3a",
      "range": {
        "startLine": 138,
        "startChar": 0,
        "endLine": 143,
        "endChar": 40
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfa16751_9232f088",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 143,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-24T00:24:17Z",
      "side": 1,
      "message": "Please do not prepare for features that might happen later, unless it is very obvious. I don\u0027t see a point in wrapping a one-liner (that has public docs) in a function call that readers are obviously less familiar with.",
      "parentUuid": "e650b7a0_5acd683d",
      "range": {
        "startLine": 138,
        "startChar": 0,
        "endLine": 143,
        "endChar": 40
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5f4e3ac_c719e99e",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 146,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "this has exactly one caller, no need to split this into a separate function for this single line. Unless you write a test for it :-)",
      "range": {
        "startLine": 146,
        "startChar": 4,
        "endLine": 146,
        "endChar": 26
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d14ce85c_cd1955dd",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 146,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-23T01:40:42Z",
      "side": 1,
      "message": "Its a logical unit of work, the comment is important too, I\u0027d rather not bury that in the caller.",
      "parentUuid": "b5f4e3ac_c719e99e",
      "range": {
        "startLine": 146,
        "startChar": 4,
        "endLine": 146,
        "endChar": 26
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "31329cba_25a18b77",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 146,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-24T00:24:17Z",
      "side": 1,
      "message": "you can combine it with the one below.",
      "parentUuid": "d14ce85c_cd1955dd",
      "range": {
        "startLine": 146,
        "startChar": 4,
        "endLine": 146,
        "endChar": 26
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5144ba8_0845f4da",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 156,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "exactly one caller. No need to separate an array slice into a function.\n\nI would probably put this stuff into a MakefileDepends class. Something like\n\nclass MakefileDepends:\n\n   def __init__(self, file_to_analyze):\n     # read the file\n     # create a map for dep-\u003edep\n     # add a lookup method\n     # add iterators to iterate the dependencies\n\n(Note, at this point I did not read the whole implementation, so the above might be a bit inaccurate.)",
      "range": {
        "startLine": 156,
        "startChar": 4,
        "endLine": 156,
        "endChar": 37
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81c696ab_def8d378",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 156,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Its more meaningful from the caller location than an array slice operation there.",
      "parentUuid": "b5144ba8_0845f4da",
      "range": {
        "startLine": 156,
        "startChar": 4,
        "endLine": 156,
        "endChar": 37
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d358e3d6_0efb5e84",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 156,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-24T00:24:17Z",
      "side": 1,
      "message": "you still could make it an object as suggested.",
      "parentUuid": "81c696ab_def8d378",
      "range": {
        "startLine": 156,
        "startChar": 4,
        "endLine": 156,
        "endChar": 37
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49e1c056_7acb25a4",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 169,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "assignment.split(\":\u003d\", maxsplit\u003d1)",
      "range": {
        "startLine": 169,
        "startChar": 13,
        "endLine": 169,
        "endChar": 58
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a5a0954_88e06dfb",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 169,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "The use of split that you suggested leaves the optional_spaces around the :\u003d in result[0]\nand result[1]",
      "parentUuid": "49e1c056_7acb25a4",
      "range": {
        "startLine": 169,
        "startChar": 13,
        "endLine": 169,
        "endChar": 58
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c55f162f_5f155825",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 169,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-24T00:24:17Z",
      "side": 1,
      "message": "a test could have saved me, but\n\n  map(str.strip, assignment.split(\":\u003d\", maxsplit\u003d1))\n\nshould do the trick then",
      "parentUuid": "3a5a0954_88e06dfb",
      "range": {
        "startLine": 169,
        "startChar": 13,
        "endLine": 169,
        "endChar": 58
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "447de408_027af3fe",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 180,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "why would you delete right?",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20d7be4b_8101f6d0",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 180,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "to make pylint3 happy. Turned it into _ per your other suggestion elsewhere.",
      "parentUuid": "447de408_027af3fe",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cdc25e3_8a6a0cc8",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 188,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "either go the way as above to build a key-value map of assignments of a file, or, probably rather useful, only have the method returning the tuple (I would it name key, value).\n\nOn the caller site, unpack the tuple and take what you need:\n\n  _, right \u003d do_the_split(...)",
      "range": {
        "startLine": 184,
        "startChar": 0,
        "endLine": 188,
        "endChar": 16
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92b454bc_3ad21ba3",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 188,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Using _ now, del was to make pylint3 happy",
      "parentUuid": "5cdc25e3_8a6a0cc8",
      "range": {
        "startLine": 184,
        "startChar": 0,
        "endLine": 188,
        "endChar": 16
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cde6e1e0_e5dcf666",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 191,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "that is confusing: we are taking dependencies (for the object file) and are returning dependencies (then without the obj file).",
      "range": {
        "startLine": 191,
        "startChar": 28,
        "endLine": 191,
        "endChar": 40
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0357227_61f1f7e5",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 191,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "We are taking a list of dependencies, checking if the first one is a .c file, if so returning the remaining ones, which are files that were included by the compiler, this is done on the right side of the :\u003d . The .o part is on the left of the :\u003d assignment.",
      "parentUuid": "cde6e1e0_e5dcf666",
      "range": {
        "startLine": 191,
        "startChar": 28,
        "endLine": 191,
        "endChar": 40
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e0e9666_d6530f4c",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 198,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "that is more like an assert as something is severely odd if this is the case (i.e. an object file without a source file)",
      "range": {
        "startLine": 197,
        "startChar": 4,
        "endLine": 198,
        "endChar": 44
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6bfc358b_4a73d75a",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 198,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Yes, it is odd enough, but better safe than sorry. Python asserts are turned off when scripts\nrun without debug turned on, so I\u0027d rather make it a hard error, than being optionally checked.",
      "parentUuid": "5e0e9666_d6530f4c",
      "range": {
        "startLine": 197,
        "startChar": 4,
        "endLine": 198,
        "endChar": 44
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17aa357f_aff143ce",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 198,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-24T00:24:17Z",
      "side": 1,
      "message": "better raise ValueError",
      "parentUuid": "6bfc358b_4a73d75a",
      "range": {
        "startLine": 197,
        "startChar": 4,
        "endLine": 198,
        "endChar": 44
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c697a340_4e065cb8",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 226,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "That can be replaced with\n\n  return lines.strip().splitlines()\n\nand as such does not need a separate function.",
      "range": {
        "startLine": 222,
        "startChar": 4,
        "endLine": 226,
        "endChar": 17
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2d11b18_c3922341",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 226,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "That almost does the trick, but not quite:\n\n\u003e\u003e\u003e s\u003d\"\"\"\n... \n... \n... x\n... \n... y\n... \n... \n... \n... \"\"\"\n\u003e\u003e\u003e print(s)\n\n\n\nx\n\ny\n\n\n\n\n\u003e\u003e\u003e print(s.strip().splitlines())\n[\u0027x\u0027, \u0027\u0027, \u0027y\u0027]\n\u003e\u003e\u003e print(re.split(r\"\\n+\", re.sub(r\"(\\A\\n*|\\n*\\Z)\", \"\", s)))\n[\u0027x\u0027, \u0027y\u0027]\n\u003e\u003e\u003e \n\nNote the empty \u0027\u0027 between the \u0027x\u0027 and the \u0027y\u0027\nI don\u0027t want those in there\n\nI looked at the documentation, it does not have an optional argument to collapse internal\nempty lines. Also splitlines() function has a rather surprising set of characters that it\nconsiders as line separators, some I knew (the ASCII ones):\n\nLine Feed\nCarriage Return\nCarriage Return + Line Feed\nLine Tabulation\nForm Feed\nFile Separator\nGroup Separator\nRecord Separator\nNext Line (C1 Control Code)\nLine Separator\nParagraph Separator",
      "parentUuid": "c697a340_4e065cb8",
      "range": {
        "startLine": 222,
        "startChar": 4,
        "endLine": 226,
        "endChar": 17
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8971f0dd_893ed929",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 226,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-24T00:24:17Z",
      "side": 1,
      "message": "again a test could have saved me ;-)\n\n  return [line for line in lines.strip().splitlines() if line]",
      "parentUuid": "a2d11b18_c3922341",
      "range": {
        "startLine": 222,
        "startChar": 4,
        "endLine": 226,
        "endChar": 17
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da316a0a_de5152d2",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 237,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "lines_to_list()[0]\n\nor what I said above, unless a performance test can proof the need for this optimization",
      "range": {
        "startLine": 229,
        "startChar": 0,
        "endLine": 237,
        "endChar": 79
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d42e6f8_87015a27",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 237,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "The files in question have around 1000+ lines (lists of dependencies).\nI only want the first line. Don\u0027t see a reason to ask it to split it into a huge list to\njust use the first line.",
      "parentUuid": "da316a0a_de5152d2",
      "range": {
        "startLine": 229,
        "startChar": 0,
        "endLine": 237,
        "endChar": 79
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70bd1cc8_da1537d5",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 237,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-24T00:24:17Z",
      "side": 1,
      "message": "Again, I believe you if you measured it. Your approach compiles two regular expressions and applies them both to the full string. My approach only needs to search for the first occurrence of the delimiter and set up 2 strings in the array based on the offset.",
      "parentUuid": "6d42e6f8_87015a27",
      "range": {
        "startLine": 229,
        "startChar": 0,
        "endLine": 237,
        "endChar": 79
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b36df5b_0e113663",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 240,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "The name is not exactly describing what this function does.",
      "range": {
        "startLine": 240,
        "startChar": 4,
        "endLine": 240,
        "endChar": 18
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85f62c23_da7e19b5",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 240,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Leaving unresolved for now. Can\u0027t think of a better name. The code will be removed and all\ncallers turned into string.split() (no need for the strip() in this case).",
      "parentUuid": "5b36df5b_0e113663",
      "range": {
        "startLine": 240,
        "startChar": 4,
        "endLine": 240,
        "endChar": 18
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91ddc659_d3f5b1d7",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 247,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "str.strip().split()",
      "range": {
        "startLine": 240,
        "startChar": 0,
        "endLine": 247,
        "endChar": 65
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39c623c8_01fc82f3",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 247,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-23T01:40:42Z",
      "side": 1,
      "message": "The strip() part is not needed, thanks for the suggestion.",
      "parentUuid": "91ddc659_d3f5b1d7",
      "range": {
        "startLine": 240,
        "startChar": 0,
        "endLine": 247,
        "endChar": 65
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "01ca86da_df70d88e",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 250,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "https://docs.python.org/3.8/library/stdtypes.html#str.endswith",
      "range": {
        "startLine": 250,
        "startChar": 4,
        "endLine": 250,
        "endChar": 11
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2462b26_46c9b4b4",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 250,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Thanks!",
      "parentUuid": "01ca86da_df70d88e",
      "range": {
        "startLine": 250,
        "startChar": 4,
        "endLine": 250,
        "endChar": 11
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86af2c8d_c21d31e2",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 262,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "return [entry for entry in line.strip().split() if entry.endswith(\".o\")]",
      "range": {
        "startLine": 258,
        "startChar": 0,
        "endLine": 262,
        "endChar": 17
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf54b68e_3913c21d",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 262,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Thanks. Done.",
      "parentUuid": "86af2c8d_c21d31e2",
      "range": {
        "startLine": 258,
        "startChar": 0,
        "endLine": 262,
        "endChar": 17
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "203c3ef5_574c402e",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 274,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "consider implementing Kmod.__str__(self) instead",
      "range": {
        "startLine": 274,
        "startChar": 4,
        "endLine": 274,
        "endChar": 28
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbdab992_ab0d1bed",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 274,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Will do in the future.\nLeaving unresolved for now.",
      "parentUuid": "203c3ef5_574c402e",
      "range": {
        "startLine": 274,
        "startChar": 4,
        "endLine": 274,
        "endChar": 28
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "acd816aa_645ad7d6",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 274,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-23T01:40:42Z",
      "side": 1,
      "message": "I removed all the print() member functions, won\u0027t add __str__() unless needed, see earlier\nreply.",
      "parentUuid": "dbdab992_ab0d1bed",
      "range": {
        "startLine": 274,
        "startChar": 4,
        "endLine": 274,
        "endChar": 28
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bacd75dc_9c55deae",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 277,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "that information is not really useful when reasoning about the generation of the string representation of this object.",
      "range": {
        "startLine": 277,
        "startChar": 8,
        "endLine": 277,
        "endChar": 44
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1337e4de_909d195d",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 277,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "All the print() member functions are for debugging for now. They will go away or be turned\ninto __str__() at a later time.",
      "parentUuid": "bacd75dc_9c55deae",
      "range": {
        "startLine": 277,
        "startChar": 8,
        "endLine": 277,
        "endChar": 44
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36eb14ab_207bde75",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 277,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-23T01:40:42Z",
      "side": 1,
      "message": "I decided to remove all the print() functions, I will add __str__() when an if needed at a\nlater time if required, for example for logging or dumping the external state of the program.\nIf that is done it will be in whatever the most appropriate form it should be.  None of that\nneeds to be decided now.  Don\u0027t want the review to be distracted by the debugging support code.",
      "parentUuid": "1337e4de_909d195d",
      "range": {
        "startLine": 277,
        "startChar": 8,
        "endLine": 277,
        "endChar": 44
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84e9c0af_6185eed1",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 308,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "consider making the member variables an implementation detail by using the protected naming style _lower_with_under",
      "range": {
        "startLine": 308,
        "startChar": 13,
        "endLine": 308,
        "endChar": 17
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c337d47_b208db15",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 308,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Will consider in next batch of changes.\nLeaving unresolved for now.",
      "parentUuid": "84e9c0af_6185eed1",
      "range": {
        "startLine": 308,
        "startChar": 13,
        "endLine": 308,
        "endChar": 17
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b110fe5_df2cef4b",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 308,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-23T01:40:42Z",
      "side": 1,
      "message": "Might consider at a later time, I don\u0027t think the code is going to become that complex that\nit needs to hide information from itself.",
      "parentUuid": "4c337d47_b208db15",
      "range": {
        "startLine": 308,
        "startChar": 13,
        "endLine": 308,
        "endChar": 17
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "968e36bb_49514f22",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 308,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-24T00:24:17Z",
      "side": 1,
      "message": "It is convention to do so, please apply http://google.github.io/styleguide/pyguide.html#3162-naming-conventions.",
      "parentUuid": "1b110fe5_df2cef4b",
      "range": {
        "startLine": 308,
        "startChar": 13,
        "endLine": 308,
        "endChar": 17
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70a1c231_62159329",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 313,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "avoid dealing with this issue by using os.path.join() to combine them\n\nhttps://docs.python.org/3.8/library/os.path.html#os.path.join",
      "range": {
        "startLine": 312,
        "startChar": 8,
        "endLine": 313,
        "endChar": 59
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7895f22_4424b5af",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 313,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Not dealing with Windows and \u0027\\\u0027 separators. The whole program has the invariant that \ndirectories all end in /, thus + is a simpler way to join a dir and a filename",
      "parentUuid": "70a1c231_62159329",
      "range": {
        "startLine": 312,
        "startChar": 8,
        "endLine": 313,
        "endChar": 59
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "898d4e96_edcefa90",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 313,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-24T00:24:17Z",
      "side": 1,
      "message": "This is not about Windows (and who knows at this point in time if it is in the future, crossing fingers though :-) ). Python allows to write platform agnostic code and the use of os.path.join() is very common, in particular, because you don\u0027t have to worry about that invariant yourself and the platform thing comes for free.\n\nalso root + \u0027/\u0027 + sub + \u0027/\u0027 + file is hard to read and easy to get mistyped without upsetting the interpreter as opposed to os.path.join(root,sub,file). Please use this common convention.",
      "parentUuid": "c7895f22_4424b5af",
      "range": {
        "startLine": 312,
        "startChar": 8,
        "endLine": 313,
        "endChar": 59
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae615b1a_bd274c08",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 322,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "That is already some work that does not belong into the constructor.",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c9737e0_4d33e2ca",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 322,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "These 3 init functions where folded into the constructor.",
      "parentUuid": "ae615b1a_bd274c08",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "937e93c0_74ed966f",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 324,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "that is very specific. probably rephrase this comment to read more general.",
      "range": {
        "startLine": 324,
        "startChar": 49,
        "endLine": 324,
        "endChar": 66
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ab99489_694cd09b",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 324,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "No all those were examples to make it clearer to the code reader.",
      "parentUuid": "937e93c0_74ed966f",
      "range": {
        "startLine": 324,
        "startChar": 49,
        "endLine": 324,
        "endChar": 66
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "31bfc6f3_811a687c",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 324,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-24T00:24:17Z",
      "side": 1,
      "message": "the comment implies that it is only applicable for this particular module, not that this is an example, please clarify in the comment.",
      "parentUuid": "5ab99489_694cd09b",
      "range": {
        "startLine": 324,
        "startChar": 49,
        "endLine": 324,
        "endChar": 66
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d61d21c_7efc92af",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 333,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "again, is this only applicable for this very file?",
      "range": {
        "startLine": 333,
        "startChar": 24,
        "endLine": 333,
        "endChar": 41
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad044685_e0b326ec",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 333,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "No all those were examples to make it clearer to the code reader.",
      "parentUuid": "5d61d21c_7efc92af",
      "range": {
        "startLine": 333,
        "startChar": 24,
        "endLine": 333,
        "endChar": 41
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2f87b07_921723be",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 345,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "this looks very much like an assert to catch programming errors",
      "range": {
        "startLine": 345,
        "startChar": 12,
        "endLine": 345,
        "endChar": 75
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fa88a50_628db6f3",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 345,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "It is to catch malformed input.",
      "parentUuid": "c2f87b07_921723be",
      "range": {
        "startLine": 345,
        "startChar": 12,
        "endLine": 345,
        "endChar": 75
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f6b3de2_cf2b6fcc",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 345,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-24T00:24:17Z",
      "side": 1,
      "message": "raise ValueError then",
      "parentUuid": "1fa88a50_628db6f3",
      "range": {
        "startLine": 345,
        "startChar": 12,
        "endLine": 345,
        "endChar": 75
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f50d348_d1bee00f",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 430,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "make the constructor the first method",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d308b27_502ef9a4",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 430,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Done for all classes.",
      "parentUuid": "8f50d348_d1bee00f",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "35b62aae_cc352bc5",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 447,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "__str__()",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f40be733_98d629ba",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 447,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Will either remove print() or turn into __str__() at a later time.",
      "parentUuid": "35b62aae_cc352bc5",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0411a1a_48c31deb",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 449,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "not sure this is actually helpful text",
      "range": {
        "startLine": 449,
        "startChar": 14,
        "endLine": 449,
        "endChar": 25
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a60269eb_813ca3c5",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 449,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "All the print() member functions are for debugging for now. They will all be removed or\nturned into __str__() at a later time.",
      "parentUuid": "e0411a1a_48c31deb",
      "range": {
        "startLine": 449,
        "startChar": 14,
        "endLine": 449,
        "endChar": 25
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fdd716c5_5a9e796d",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 497,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "again, that is a lot of work in a constructor.\n\nIn particular, file_must_exist() might even throw and you don\u0027t usually want to throw in a constructor something else than a ValueError",
      "range": {
        "startLine": 497,
        "startChar": 8,
        "endLine": 497,
        "endChar": 16
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6ace2f4_640aa594",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 497,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "I love my object as fully formed as possible when constructed. Nothing wrong with that, I hope.\nDoes it cause Python to do weird horrible things?",
      "parentUuid": "fdd716c5_5a9e796d",
      "range": {
        "startLine": 497,
        "startChar": 8,
        "endLine": 497,
        "endChar": 16
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "69473a60_69a24de8",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 497,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-24T00:24:17Z",
      "side": 1,
      "message": "The constructor should satisfy the invariant. You are doing a lot of work that is possibly not needed in all cases of the usage of your object. In this particular example (and I pick it as a representative example):\n\n what_is_my_build_dir \u003d Kernel(\"path/to/vmlinux\").get_build_dir()\n\nis a valid use case (I am using public methods) for which your constructor does a whole lot of unnecessary stuff.\nOne way of doing that is lazy instantiation (as in \u0027if not files: _init_files()\u0027).",
      "parentUuid": "e6ace2f4_640aa594",
      "range": {
        "startLine": 497,
        "startChar": 8,
        "endLine": 497,
        "endChar": 16
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9aff94f_5631b503",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 501,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "os.path.join()",
      "range": {
        "startLine": 501,
        "startChar": 16,
        "endLine": 501,
        "endChar": 46
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79759fa7_921fefc6",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 501,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Plus is so much easier to read. Its an invariant of all this code that all dir variables\nalready have a trailing \u0027/\u0027 and we are really not going to be running this on Windows so\nhaving to deal with \u0027\\\u0027 as a pathname delimiter is not relevant.",
      "parentUuid": "f9aff94f_5631b503",
      "range": {
        "startLine": 501,
        "startChar": 16,
        "endLine": 501,
        "endChar": 46
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e8f6f7b_34d3d023",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 501,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-24T00:24:17Z",
      "side": 1,
      "message": "see above",
      "parentUuid": "79759fa7_921fefc6",
      "range": {
        "startLine": 501,
        "startChar": 16,
        "endLine": 501,
        "endChar": 46
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14359413_d8807b69",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 506,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "aolist is too much of an abbreviation",
      "range": {
        "startLine": 506,
        "startChar": 8,
        "endLine": 506,
        "endChar": 14
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1fd9bc9_24847eae",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 506,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Its scope is very short, its a list of .a and .o files.",
      "parentUuid": "14359413_d8807b69",
      "range": {
        "startLine": 506,
        "startChar": 8,
        "endLine": 506,
        "endChar": 14
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6cd3e21e_c8fd58ca",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 506,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-24T00:24:17Z",
      "side": 1,
      "message": "archives_and_objects",
      "parentUuid": "a1fd9bc9_24847eae",
      "range": {
        "startLine": 506,
        "startChar": 8,
        "endLine": 506,
        "endChar": 14
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5deec532_aeabaf3f",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 513,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "Consider\n\n  self.list_a_o \u003d [os.path.join(self.build_dir,file) \n                   for file in aolist if not file.startswith(\"/\")]",
      "range": {
        "startLine": 509,
        "startChar": 1,
        "endLine": 513,
        "endChar": 38
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "733e9a06_bedf9cd1",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 513,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "That seems much harder to read to me. Not sure that it does the same thing.",
      "parentUuid": "5deec532_aeabaf3f",
      "range": {
        "startLine": 509,
        "startChar": 1,
        "endLine": 513,
        "endChar": 38
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1dce386e_9e38862b",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 513,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-24T00:24:17Z",
      "side": 1,
      "message": "Sorry, that is very idiomatic Python. Please adopt this style.",
      "parentUuid": "733e9a06_bedf9cd1",
      "range": {
        "startLine": 509,
        "startChar": 1,
        "endLine": 513,
        "endChar": 38
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a769bf9_c6fb6244",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 516,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "In the future, we might consider https://www.attrs.org for these POD classes. No need now",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b88c320_d18fa11f",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 516,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "This call will grow with methods, won\u0027t stay POD. 50% of the code is missing.",
      "parentUuid": "7a769bf9_c6fb6244",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "110404bf_343f128c",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 537,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "see my comments also below, but it feels like this class structure is not actually giving us a lot.\n\nWhat we effectively have is Info that carries a K object with an expected interface. These K can be acquired from a \u0027factory\u0027 or something like this.\n\nError could be set similar to K on Info itself. No need for subclassing this.",
      "range": {
        "startLine": 537,
        "startChar": 6,
        "endLine": 537,
        "endChar": 10
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a427de04_99cdf261",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 537,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "There is enough of a difference between an InfoKmod and an InfoKernel to merit the difference.\nThen InfoError helps with the flow of stop() raised exceptions, which are really useful when\nrunning code in parallel.",
      "parentUuid": "110404bf_343f128c",
      "range": {
        "startLine": 537,
        "startChar": 6,
        "endLine": 537,
        "endChar": 10
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "daba7774_4bd39db9",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 543,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "consider __str__()",
      "range": {
        "startLine": 542,
        "startChar": 0,
        "endLine": 543,
        "endChar": 46
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9009001b_a41d3fdb",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 543,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Print() code is so far to debug during development, will either remove it all or turn into\n__str__() if it needs to be kept.",
      "parentUuid": "daba7774_4bd39db9",
      "range": {
        "startLine": 542,
        "startChar": 0,
        "endLine": 543,
        "endChar": 46
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a173b7d2_6ff96334",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 549,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "raise NotImplementedError(\"Go implement it!\")",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "040fe28d_afd13560",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 549,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "This is actually meant to be invoked, see its implementation in InfoError.",
      "parentUuid": "a173b7d2_6ff96334",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c1fe096_19b18ccc",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 549,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-24T00:24:17Z",
      "side": 1,
      "message": "Eww.",
      "parentUuid": "040fe28d_afd13560",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a1671ab_094ec605",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 551,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "dopr the empty constructor",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ce04267_29e90e2e",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 551,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "This will get a few more things later.",
      "parentUuid": "5a1671ab_094ec605",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "404000e9_2fa3781c",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 551,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-24T00:24:17Z",
      "side": 1,
      "message": "that is not a reason to keep it, please drop it.",
      "parentUuid": "3ce04267_29e90e2e",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60fe659d_d8b08cd4",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 563,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "that feels wrong",
      "range": {
        "startLine": 562,
        "startChar": 0,
        "endLine": 563,
        "endChar": 19
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8f14ccc_a3f41c5a",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 563,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Its a polymorphic way of avoiding type tests, you ask the object if it is of the type you\nare interested.",
      "parentUuid": "60fe659d_d8b08cd4",
      "range": {
        "startLine": 562,
        "startChar": 0,
        "endLine": 563,
        "endChar": 19
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b79f61bb_74091582",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 563,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-24T00:24:17Z",
      "side": 1,
      "message": "We don\u0027t need polymorphism for this.\n\nclass Info:\n  get_error():\n    return self.my_potentially_None_ErrorInfo_object",
      "parentUuid": "e8f14ccc_a3f41c5a",
      "range": {
        "startLine": 562,
        "startChar": 0,
        "endLine": 563,
        "endChar": 19
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97d5f2d2_70bc5030",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 569,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "move the constructor up",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bda03562_973e6f88",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 569,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Done for all classes.",
      "parentUuid": "97d5f2d2_70bc5030",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a50ca945_e6eb4f6e",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 714,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "same comments as for InfoKernel",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f215226a_eed9ec6f",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 714,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Ditto to comments there.",
      "parentUuid": "a50ca945_e6eb4f6e",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f92eef36_00cf953e",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 741,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "this class does not really give a lot of benefit over \u0027Kernel\u0027 itself\n\nIn particular, there is no implementation difference between {InfoKmod,InfoKernel}.{print, get_build_dir, get_files_o} other than that you call it with a different name.\n\nConsider creating kmod,kernel in a factory and giving up the deep class hierarchy.",
      "range": {
        "startLine": 741,
        "startChar": 6,
        "endLine": 741,
        "endChar": 16
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61f49cfb_be29d2db",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 741,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Yes, see comments under Kmod and Kernel and not merging them with InfoKmod and InfoKernel\nrespectively.  This was done purposely to keep the classes small.",
      "parentUuid": "f92eef36_00cf953e",
      "range": {
        "startLine": 741,
        "startChar": 6,
        "endLine": 741,
        "endChar": 16
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36328cc8_2d087b51",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 743,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "implement __str__()",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f44e9285_1e558413",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 743,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "The print() code is for debugging while developing this. Will replace with __str__() if there\nis a need in the final code.  Leaving as is for now.",
      "parentUuid": "36328cc8_2d087b51",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "002071b5_65850dcb",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 762,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "move the constructor up.",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "645c5e7f_d88f2f9a",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 762,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Moved all the constructors to the start of their classes.",
      "parentUuid": "002071b5_65850dcb",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3785efad_b3873437",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 776,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "rather than only handling ExitError, how about handling all sorts of Exceptions here? You could at least create a backtrace if something happened that you would not expect. Otherwise this information is lost.",
      "range": {
        "startLine": 776,
        "startChar": 0,
        "endLine": 776,
        "endChar": 74
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fae5e937_5547a6b3",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 776,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "I will consider this later. Leaving unresolved.",
      "parentUuid": "3785efad_b3873437",
      "range": {
        "startLine": 776,
        "startChar": 0,
        "endLine": 776,
        "endChar": 74
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "125e9ad5_1d15e50e",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 782,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "rather than this distinction here, you could just submit the \"vmlinux.o\" as a first element to the pool and then (while this is already running) find the kernel modules and also submit them. That would simplify the implementation and would make this function obsolete.",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd078888_eba91479",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 782,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "I will consider this later. Leaving unresolved.",
      "parentUuid": "125e9ad5_1d15e50e",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3874e72f_956cd51c",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 784,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "the generator effectively keeps the result of find alive, so it does not feel like there is an advantage over\n\n  return [\"vmlinux.o\"] + [str(ko) for ko in find(\".ko\")]",
      "range": {
        "startLine": 782,
        "startChar": 0,
        "endLine": 784,
        "endChar": 25
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "678a2e6b_9da49b14",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 784,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Insofar as there is an underlying filesystem walk to find the *.ko files, there is at least\na bit of earlier parallelism where vmlinux.o can be worked on as soon as possible.",
      "parentUuid": "3874e72f_956cd51c",
      "range": {
        "startLine": 782,
        "startChar": 0,
        "endLine": 784,
        "endChar": 25
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "995de96f_1816aa9f",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 784,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-24T00:24:17Z",
      "side": 1,
      "message": "for the record,\n\n (str(ko) for ko in find(\".ko\"))\n\nwould produce a generator expression",
      "parentUuid": "678a2e6b_9da49b14",
      "range": {
        "startLine": 782,
        "startChar": 0,
        "endLine": 784,
        "endChar": 25
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95c40869_e191f0e0",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 787,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "actually work_on_vmlinux_and_all_ko()",
      "range": {
        "startLine": 787,
        "startChar": 4,
        "endLine": 787,
        "endChar": 18
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "156748df_76837df0",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 787,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Thanks, chose a different name.",
      "parentUuid": "95c40869_e191f0e0",
      "range": {
        "startLine": 787,
        "startChar": 4,
        "endLine": 787,
        "endChar": 18
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2857a1d4_b9fcfa33",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 792,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "make it a command line option to run on the main thread only",
      "range": {
        "startLine": 790,
        "startChar": 1,
        "endLine": 792,
        "endChar": 1
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb0c23c6_c7a0360e",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 792,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Will consider later. The code needs to run in parallel. The scripts for this ran at around\n30 seconds, this is taking over 2 minutes for the same amount of work :-(\nI will investigate why later",
      "parentUuid": "2857a1d4_b9fcfa33",
      "range": {
        "startLine": 790,
        "startChar": 1,
        "endLine": 792,
        "endChar": 1
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b09570e2_87d45de7",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 792,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-24T00:24:17Z",
      "side": 1,
      "message": "for debugging purposes that can be very helpful",
      "parentUuid": "fb0c23c6_c7a0360e",
      "range": {
        "startLine": 790,
        "startChar": 1,
        "endLine": 792,
        "endChar": 1
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dfa1c213_3a416560",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 797,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 797,
        "startChar": 35,
        "endLine": 797,
        "endChar": 50
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c52469cb_4d16791e",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 797,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Thanks!",
      "parentUuid": "dfa1c213_3a416560",
      "range": {
        "startLine": 797,
        "startChar": 35,
        "endLine": 797,
        "endChar": 50
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d07014e0_fe08fcc4",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 827,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "why the distinction?\n\nheaders \u003d info.dependencies\n\nalso, there is no insertion into all_kmod_h_set happening, so, you might as well just drop all_kmod_h_set or kernel_h_set altogether.",
      "range": {
        "startLine": 823,
        "startChar": 0,
        "endLine": 827,
        "endChar": 61
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e26a4bad_a189c948",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 827,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "both start as empty sets in line 807 and 808, there is expected to be one kernel_h_set when\ngetting the set of headers used by the kernel.  There is expected to be multiple set of headers\nfor the InfoKmod (for the .ko files), those are accumulated, via the set union operator |\u003d\ninto all_kmod_h_set.  The code seems to work.  Maybe I don\u0027t understand what you mean.",
      "parentUuid": "d07014e0_fe08fcc4",
      "range": {
        "startLine": 823,
        "startChar": 0,
        "endLine": 827,
        "endChar": 61
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "21d001b0_2119051a",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 827,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-24T00:24:17Z",
      "side": 1,
      "message": "sorry, I misread the loop scope.",
      "parentUuid": "e26a4bad_a189c948",
      "range": {
        "startLine": 823,
        "startChar": 0,
        "endLine": 827,
        "endChar": 61
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7688f64a_06e249c7",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 830,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "print(*headers, sep\u003d\"\\n\")",
      "range": {
        "startLine": 828,
        "startChar": 0,
        "endLine": 830,
        "endChar": 18
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "812679e1_47871930",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 830,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Will revisit later when print() are revisited.\nLeaving unresolved for now.",
      "parentUuid": "7688f64a_06e249c7",
      "range": {
        "startLine": 828,
        "startChar": 0,
        "endLine": 830,
        "endChar": 18
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c154034a_62c81d40",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 846,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "if might sounds like overkill, but consider having a look at argparse. There will be more than just 2 positional arguments. :-)\n\nhttps://docs.python.org/3.8/library/argparse.html#module-argparse",
      "range": {
        "startLine": 840,
        "startChar": 4,
        "endLine": 846,
        "endChar": 15
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12762a58_67515745",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 846,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "I will consider later as the code evolves.",
      "parentUuid": "c154034a_62c81d40",
      "range": {
        "startLine": 840,
        "startChar": 4,
        "endLine": 846,
        "endChar": 15
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a93f0df_ed2d0cea",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 846,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-24T00:24:17Z",
      "side": 1,
      "message": "Please do this right from the beginning. Look at the example (https://docs.python.org/3/library/argparse.html#example), it is really not much that needs to be done.",
      "parentUuid": "12762a58_67515745",
      "range": {
        "startLine": 840,
        "startChar": 4,
        "endLine": 846,
        "endChar": 15
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76a35df0_ee588dbb",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 858,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "I find these kind of annotations rather noisy than actually useful.\nIn particular, that this unpacks into a tuple is enforced, that it is a tuple of strings is rather obvious.",
      "range": {
        "startLine": 858,
        "startChar": 44,
        "endLine": 858,
        "endChar": 67
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d47a800_253be805",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 858,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Trying to satisfy the Google python style which calls for use of ptype. I removed the bulk of\nthem (all that where # type: str) the rest is because the PEP about types says that this is\nhow one is supposed to do it.",
      "parentUuid": "76a35df0_ee588dbb",
      "range": {
        "startLine": 858,
        "startChar": 44,
        "endLine": 858,
        "endChar": 67
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6a9da90_15b5b5f1",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 859,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "if you do not care about name in the above line, capture it as \n\n _, ext\n\n\ndel name is not actually useful here",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47b72182_5af3ffd4",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 859,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "This code was deleted.",
      "parentUuid": "a6a9da90_15b5b5f1",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "24f5f08b_2621915c",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 863,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "given that you instantiate InfoKmod, this feels wrong (even though you derive from Info)\n\nThis type annotation is not giving any value.\n\nHence, just follow the usual duck typing here, there is no virtual dispatch.",
      "range": {
        "startLine": 863,
        "startChar": 33,
        "endLine": 863,
        "endChar": 43
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4d65e59_4e18df48",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 863,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "There is a requirement to specify the types to make ptype happy, so I have decided to specify\nthem to follow the Google style which calls for use of the type declarations for ptype to use.\nI don\u0027t know how good is ptype at type inference, but if the PEP for types says to put a type\ndeclaration in comments, I\u0027ve tried to do so.",
      "parentUuid": "24f5f08b_2621915c",
      "range": {
        "startLine": 863,
        "startChar": 33,
        "endLine": 863,
        "endChar": 43
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06e5ca11_483454ac",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 865,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "rather print a (custom) string representation of info, but print it here. Only this way you can embed this representation into logging. Speaking of which, this looks much more like a DEBUG loglevel that is used with -v (hah, another command line flag).",
      "range": {
        "startLine": 865,
        "startChar": 8,
        "endLine": 865,
        "endChar": 20
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "596cc08e_88e84ab1",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 865,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "The print() methods in the various classes are for now just to aid in debugging, they will go\naway or become __str__() methonds.  This is 50% of the whole program.",
      "parentUuid": "06e5ca11_483454ac",
      "range": {
        "startLine": 865,
        "startChar": 8,
        "endLine": 865,
        "endChar": 20
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2c4349e6_107bedcf",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 866,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "you are just instantiating the objects, it feels a bit unnatural that you don\u0027t actually make use of them.",
      "range": {
        "startLine": 866,
        "startChar": 4,
        "endLine": 866,
        "endChar": 11
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a246bcd9_a5ee1a93",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 866,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "As I said this is the first half of the program. The second half will make use of the Info\nobjects, specifically the Target objects which will gain methods and will stop being POD",
      "parentUuid": "2c4349e6_107bedcf",
      "range": {
        "startLine": 866,
        "startChar": 4,
        "endLine": 866,
        "endChar": 11
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be85bfa0_cde4bf96",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 866,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-24T00:24:17Z",
      "side": 1,
      "message": "That is where you could have split your patch (which I would have really appreciated). Introduce the code with the consumer. Dead code can\u0027t really be judged as there are 0 use cases.",
      "parentUuid": "a246bcd9_a5ee1a93",
      "range": {
        "startLine": 866,
        "startChar": 4,
        "endLine": 866,
        "endChar": 11
      },
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2bc23367_d077131c",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 870,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-21T17:12:42Z",
      "side": 1,
      "message": "prefer exiting from here:\n\n  sys.exit(main())\n\nadjust main() accordingly to return the error codes.\nAlso, prefer the full qualified version \u0027sys.exit\u0027 over just \u0027exit\u0027.",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c061a1d1_e528942a",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 15
      },
      "lineNbr": 870,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-22T19:32:36Z",
      "side": 1,
      "message": "Done. Thanks.",
      "parentUuid": "2bc23367_d077131c",
      "revId": "20fa71ad7d6d200eea4f010b1a0f31dc5f06bee1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}