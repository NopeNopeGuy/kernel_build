{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "049e3486_841ded21",
        "filename": "kleaf/impl/kernel_build.bzl",
        "patchSetId": 15
      },
      "lineNbr": 1390,
      "author": {
        "id": 1557540
      },
      "writtenOn": "2022-10-03T23:13:01Z",
      "side": 1,
      "message": "Does `base_archive` include *all* of the GKI modules, or just the ones that the vendor wants to use? \n\nBasically, I\u0027m wondering how a vendor lists the GKI modules they want to include in their build? For example, the `gki_defconfig` sets `\u003dM` to for all of the GKI modules, but I may only want to ship a subset of these modules. \n\nThere\u0027s an edge-case to this as well which is a vendor may decide to rename a GKI module while overriding it. For example, I may want to override the zram module and in doing so I rename the module to `zram-vendor-a.ko`. If `base_archive` includes `zram.ko`, then based on this logic `modules_staging_dir` will include both `zram.ko` and `zram-vendor-a.ko`.\n\nI know I can control which modules get loaded via the `modules.load` file, but I don\u0027t want to ship the `zram.ko` file if I\u0027m overriding it and don\u0027t plan to load the module.",
      "range": {
        "startLine": 1390,
        "startChar": 20,
        "endLine": 1390,
        "endChar": 32
      },
      "revId": "353bfbaa2b1b92591c3066134de08feee6c92a70",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a3fce0c_6dee94c9",
        "filename": "kleaf/impl/kernel_build.bzl",
        "patchSetId": 15
      },
      "lineNbr": 1390,
      "author": {
        "id": 1889091
      },
      "writtenOn": "2022-10-03T23:40:08Z",
      "side": 1,
      "message": "What vendor ships is not dependent on the kernel build; it\u0027s dependent on the AOSP build of the `system_dlkm.img`. GKI releases the archive of all GKI modules and GKI; vendor can point source with only the modules they need from that archive. Kernel built `system_dlkm.img` is for dev purposes only. Kernel built image doesn\u0027t boot without disabling the `dm-verity` otherwise hashtree footer will not match and device won\u0027t boot.\n\nVendor can only ship what they want to load via system_dlkm.img built in the AoSP and load only they wants to load from where (vendor_dlkm/system_dlkm) from their init script.",
      "parentUuid": "049e3486_841ded21",
      "range": {
        "startLine": 1390,
        "startChar": 20,
        "endLine": 1390,
        "endChar": 32
      },
      "revId": "353bfbaa2b1b92591c3066134de08feee6c92a70",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a1cdc7d_e62d05df",
        "filename": "kleaf/impl/kernel_build.bzl",
        "patchSetId": 15
      },
      "lineNbr": 1390,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-10-03T23:50:31Z",
      "side": 1,
      "message": "base_archive includes all GKI modules. But note that I filter the list; so base_modules only contains the ones we need from GKI.\n\nIn the slider case, base_modules will contain (path to zsmalloc.ko) only.\n\n\u003e and in doing so I rename the module to zram-vendor-a.ko\n\nI didn\u0027t think about the module renaming case. However, to handle this we\u0027ll need a mapping on what GKI module a device module is trying to override.\n\nDo we have a use case for this? We can follow up and allow such mapping later. Right now, this only allows overriding when the name of the module is the same.",
      "parentUuid": "6a3fce0c_6dee94c9",
      "range": {
        "startLine": 1390,
        "startChar": 20,
        "endLine": 1390,
        "endChar": 32
      },
      "revId": "353bfbaa2b1b92591c3066134de08feee6c92a70",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57150192_0241d8b7",
        "filename": "kleaf/impl/kernel_build.bzl",
        "patchSetId": 15
      },
      "lineNbr": 1390,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-10-04T16:25:13Z",
      "side": 1,
      "message": "On a second thought, I think what William said is the proper solution to this:\n\n\u003e I know I can control which modules get loaded via the modules.load file, \n\nYes; that means at least we have a mechanism to support this zram-vendor-a.ko overriding zram.ko case. We have a way to stop zram.ko from being loaded.\n\n\u003e but I don\u0027t want to ship the zram.ko file if I\u0027m overriding it and don\u0027t plan to load the module.\n\nWe can support \"TRIM_UNUSED_MODULES\". it isn\u0027t supported right now but we can do that in follow up CLs.\n\nhttps://cs.android.com/android/kernel/superproject/+/common-android-mainline:build/kernel/build_utils.sh;l\u003d187;drc\u003d3567ad13950c2619c5e29918d257d12a548a7853\n\nAs for dist_dir, the device maintainer can just remove `//common:kernel_aarch64/zram.ko` from the `data` attribute of the dist directory.",
      "parentUuid": "9a1cdc7d_e62d05df",
      "range": {
        "startLine": 1390,
        "startChar": 20,
        "endLine": 1390,
        "endChar": 32
      },
      "revId": "353bfbaa2b1b92591c3066134de08feee6c92a70",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f7f3333_d5af0906",
        "filename": "kleaf/impl/kernel_build.bzl",
        "patchSetId": 15
      },
      "lineNbr": 1390,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-10-04T23:28:24Z",
      "side": 1,
      "message": "per today\u0027s meeting, using modules.load is the way to go. Platform code should decide which is actually shipped in the initramfs; the initramfs from kernel tree is for development purposes.",
      "parentUuid": "57150192_0241d8b7",
      "range": {
        "startLine": 1390,
        "startChar": 20,
        "endLine": 1390,
        "endChar": 32
      },
      "revId": "353bfbaa2b1b92591c3066134de08feee6c92a70",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d81dd78_6267e302",
        "filename": "kleaf/impl/kernel_build.bzl",
        "patchSetId": 15
      },
      "lineNbr": 1390,
      "author": {
        "id": 1557540
      },
      "writtenOn": "2022-10-04T23:31:41Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "57150192_0241d8b7",
      "range": {
        "startLine": 1390,
        "startChar": 20,
        "endLine": 1390,
        "endChar": 32
      },
      "revId": "353bfbaa2b1b92591c3066134de08feee6c92a70",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}