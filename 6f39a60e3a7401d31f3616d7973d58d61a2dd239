{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "42446e4c_88eefb0f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1066075
      },
      "writtenOn": "2022-12-07T12:02:39Z",
      "side": 1,
      "message": "Why fake this? You could just as well vendor the real rules_cc (not that it would be much different, but still)",
      "revId": "6f39a60e3a7401d31f3616d7973d58d61a2dd239",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3447b11_8847b321",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-12-08T01:08:08Z",
      "side": 1,
      "message": "You mean by checking it out in external/ ?",
      "parentUuid": "42446e4c_88eefb0f",
      "revId": "6f39a60e3a7401d31f3616d7973d58d61a2dd239",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8251e56d_760d357d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1066075
      },
      "writtenOn": "2022-12-08T08:22:01Z",
      "side": 1,
      "message": "Yes, but nevermind; I thought Roboleaf already does that, but they apparently don\u0027t and in that case, short-circuiting things this way is the best option.\n\nBtw, how does py_binary depend on rules_cc? I\u0027m only slightly surprised, but I am slightly surprised about this.",
      "parentUuid": "d3447b11_8847b321",
      "revId": "6f39a60e3a7401d31f3616d7973d58d61a2dd239",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c269945_d2644789",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-12-09T02:16:18Z",
      "side": 1,
      "message": "How do I query dependencies on extensions (`@rules_cc//cc:defs.bzl` in this case)? I tried \n\n```\nbazel cquery --transitions\u003dlite \u0027somepath(//common:kernel_dist, @rules_cc//cc:defs.bzl)\u0027\n```\n\nbut it complains about \n\n```\ntarget \u0027defs.bzl\u0027 not declared in package \u0027cc\u0027\n```",
      "parentUuid": "8251e56d_760d357d",
      "revId": "6f39a60e3a7401d31f3616d7973d58d61a2dd239",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b26b61e2_3a69760c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-12-09T02:24:14Z",
      "side": 1,
      "message": "I think the dependency is from @local_config_cc. \n\npy_binary depends on local_config_cc as you mentioned here: \n\nhttps://b.corp.google.com/issues/228238975#comment3\n\nthen `@local_config_cc//BUILD` depends on rules_cc. It says:\n\n```\nload(\"@rules_cc//cc:defs.bzl\", \"cc_toolchain\", \"cc_toolchain_suite\")\n```\n\nI don\u0027t know how local_config_cc is generated tho.",
      "parentUuid": "3c269945_d2644789",
      "revId": "6f39a60e3a7401d31f3616d7973d58d61a2dd239",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e401724_74b6dc02",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-12-09T02:26:12Z",
      "side": 1,
      "message": "The other cc_* are needed by `@remote_java_tools` which I think is needed by py_test, but I haven\u0027t look into it with much detail.",
      "parentUuid": "b26b61e2_3a69760c",
      "revId": "6f39a60e3a7401d31f3616d7973d58d61a2dd239",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "929aae1f_1e394fd2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-12-09T03:24:17Z",
      "side": 1,
      "message": "As Liz suggests, hopefully I can get rid of this fake_rules_cc repository once I setup the hermetic toolchain and disable host toolchain discovery via `BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN`",
      "parentUuid": "2e401724_74b6dc02",
      "revId": "6f39a60e3a7401d31f3616d7973d58d61a2dd239",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df9a35cb_8eace4c2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1066075
      },
      "writtenOn": "2022-12-09T12:40:07Z",
      "side": 1,
      "message": "@Yifan: somepath won\u0027t detect dependencies on .bzl files (unfortunately), so I think your best bet is\n\n`bazel cquery \u0027somepath(//common:kernel_dist, @local_config_cc//...)`\n\nand trusting me that @local_config_cc depends on the @rules_cc (I don\u0027t think it should just like @rules_java should not be pulled in (see my thread with Ivo)\n\n`bazel query \u0027buildfiles(deps(//common:kernel_dist))` would tell which .bzl files are needed, but not the path through which they are needed so it\u0027s not a perfect solution./\n\n`BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN\u003d1` is actually a great idea if you can pull it off; it did occur to me, but fortunately Liz could recruit more brain cells to this particular problem :)",
      "parentUuid": "929aae1f_1e394fd2",
      "revId": "6f39a60e3a7401d31f3616d7973d58d61a2dd239",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6986e361_5e8f439b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-12-09T18:53:21Z",
      "side": 1,
      "message": "```\n$ bazel cquery \u0027somepath(//common:kernel_dist, @local_config_cc//...)\u0027\n[...]\n//common:kernel_dist (3fc9f8e)\n//common:kernel_aarch64_dist (e46739c)\n@bazel_tools//tools/launcher:launcher (52e56cd)\n@bazel_tools//src/tools/launcher:launcher (52e56cd)\n@bazel_tools//tools/cpp:current_cc_toolchain (52e56cd)\n@bazel_tools//tools/cpp:toolchain (52e56cd)\n@local_config_cc//:toolchain (52e56cd)\n@local_config_cc//:cc-compiler-armeabi-v7a (52e56cd)\n@local_config_cc//:stub_armeabi-v7a (52e56cd)\n```\n\nThis is on my machine",
      "parentUuid": "df9a35cb_8eace4c2",
      "revId": "6f39a60e3a7401d31f3616d7973d58d61a2dd239",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}