{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "89f5b9d4_bd47ddc9",
        "filename": "kleaf/impl/kernel_build.bzl",
        "patchSetId": 4
      },
      "lineNbr": 1884,
      "author": {
        "id": 1557540
      },
      "writtenOn": "2023-03-23T21:47:13Z",
      "side": 1,
      "message": "This doesn\u0027t build for me:\n```\nError: \u0027KernelBuildAbiInfo\u0027 value has no field or method \u0027src_protected_modules_list\u0027\n```",
      "range": {
        "startLine": 1884,
        "startChar": 0,
        "endLine": 1884,
        "endChar": 118
      },
      "revId": "f31c5bdeea3caa3d48a68e5ad068a1a43dac2e57",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b2199e0_a33be15a",
        "filename": "kleaf/impl/kernel_build.bzl",
        "patchSetId": 4
      },
      "lineNbr": 1884,
      "author": {
        "id": 1858345
      },
      "writtenOn": "2023-03-23T21:51:32Z",
      "side": 1,
      "message": "Hmm, it\u0027s been building for me in our tree. Any way I could repro the issue?\n\n@elsk@google.com, I could do this, does it seem also correct?\n\n```\nif base_kernel_utils.get_base_kernel(ctx)[KernelBuildAbiInfo] \u0026\u0026 base_kernel_utils.get_base_kernel(ctx)[KernelBuildAbiInfo].src_protected_modules_list:\n    ...\n```",
      "parentUuid": "89f5b9d4_bd47ddc9",
      "range": {
        "startLine": 1884,
        "startChar": 0,
        "endLine": 1884,
        "endChar": 118
      },
      "revId": "f31c5bdeea3caa3d48a68e5ad068a1a43dac2e57",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75d220a7_e0084306",
        "filename": "kleaf/impl/kernel_build.bzl",
        "patchSetId": 4
      },
      "lineNbr": 1884,
      "author": {
        "id": 1889091
      },
      "writtenOn": "2023-03-23T22:13:45Z",
      "side": 1,
      "message": "Probably protected_exports_list is not set in the kernel_build for the device.\n\nLike this: https://cs.android.com/android/kernel/superproject/+/common-android14-6.1:common/BUILD.bazel;l\u003d30\n\n`kleaf` also supports the non GKI targets from the ACK; so the default is not set to the base_kernel\u0027s value.\n\nhttps://android-review.git.corp.google.com/c/kernel/build/+/2470261/comment/e42f01d1_2be3558c/",
      "parentUuid": "1b2199e0_a33be15a",
      "range": {
        "startLine": 1884,
        "startChar": 0,
        "endLine": 1884,
        "endChar": 118
      },
      "revId": "f31c5bdeea3caa3d48a68e5ad068a1a43dac2e57",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa51a931_06403a3d",
        "filename": "kleaf/impl/kernel_build.bzl",
        "patchSetId": 4
      },
      "lineNbr": 1893,
      "author": {
        "id": 1557540
      },
      "writtenOn": "2023-03-23T22:07:58Z",
      "side": 1,
      "message": "I think you can just do this:\n\n```\nbase_modules\u003d$(grep -v -w -F -f {protected_modules_list_path} {all_module_basenames_file})\n```\n\nHowever, I think that it\u0027s possible that the modules in `all_module_basenames_file` could just be the basename and not include the path. In that case, neither of these solutions would work. So you probably need to run $(basename ${{module}})",
      "range": {
        "startLine": 1888,
        "startChar": 0,
        "endLine": 1893,
        "endChar": 0
      },
      "revId": "f31c5bdeea3caa3d48a68e5ad068a1a43dac2e57",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}