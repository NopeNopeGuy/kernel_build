{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bef9340c_1945771e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-06-14T08:50:06Z",
      "side": 1,
      "message": "ping",
      "revId": "595fc91affce7360261e3b079b7dae4c8f4adbf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27a0122d_224a6b25",
        "filename": "gki/download_from_ci",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-06-14T12:58:20Z",
      "side": 1,
      "message": "this creates a dependency to a host tool \"file\". I would prefer avoiding this.",
      "range": {
        "startLine": 177,
        "startChar": 40,
        "endLine": 177,
        "endChar": 44
      },
      "revId": "595fc91affce7360261e3b079b7dae4c8f4adbf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0bf6ef4_0dabb14c",
        "filename": "gki/download_from_ci",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-06-14T13:01:40Z",
      "side": 1,
      "message": "It\u0027s a quite ubiquitous utility. From `man file`: \n\nThere has been a file command in every UNIX since at least Research Version 4 (man page dated November, 1973). \n\nWhat\u0027s your suggestion for bzImage then?",
      "parentUuid": "27a0122d_224a6b25",
      "range": {
        "startLine": 177,
        "startChar": 40,
        "endLine": 177,
        "endChar": 44
      },
      "revId": "595fc91affce7360261e3b079b7dae4c8f4adbf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53f878e8_728a6f97",
        "filename": "gki/download_from_ci",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-06-14T15:07:09Z",
      "side": 1,
      "message": "I would prefer to provide `file` through the hermetic toolchain. In particular, the code creates a dependency on the exact output format of the tool. Even if universally available, there are likely differences in the output for different versions of it. Does toybox perhaps has \"file\" ?",
      "parentUuid": "a0bf6ef4_0dabb14c",
      "range": {
        "startLine": 177,
        "startChar": 40,
        "endLine": 177,
        "endChar": 44
      },
      "revId": "595fc91affce7360261e3b079b7dae4c8f4adbf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc045591_23faa3bd",
        "filename": "gki/download_from_ci",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-06-14T15:12:51Z",
      "side": 1,
      "message": "yes, toybox has a file. i don\u0027t remember seeing any code for kernel image version strings. is there documentation for that? (the comment implies that the version is compressed data, rather than part of an uncompressed header?)",
      "parentUuid": "53f878e8_728a6f97",
      "range": {
        "startLine": 177,
        "startChar": 40,
        "endLine": 177,
        "endChar": 44
      },
      "revId": "595fc91affce7360261e3b079b7dae4c8f4adbf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5d8f4e4_bdfad5a4",
        "filename": "gki/download_from_ci",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-06-14T15:42:27Z",
      "side": 1,
      "message": "In my understanding, file doesn\u0027t format the version string. It instead can locate the place where the version string is [1] and prints it.\n\n[1] https://github.com/file/file/blob/master/magic/Magdir/linux#L154\n\n\u003e the comment implies that the version is compressed data, rather than part of an uncompressed header?\n\nI was wrong about this. The version string is stored in the uncompressed region, so grep should work. But the problem is that the bzImage for x86_64 doesn\u0027t contain the prefix \"Linux version \" before the version string, so we need to grep a string that \"looks\" like a version. I think letting file(1) handle this problem is easier/better than passing yet another regex to grep.",
      "parentUuid": "cc045591_23faa3bd",
      "range": {
        "startLine": 177,
        "startChar": 40,
        "endLine": 177,
        "endChar": 44
      },
      "revId": "595fc91affce7360261e3b079b7dae4c8f4adbf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a925ff8_ee1c20e4",
        "filename": "gki/download_from_ci",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-06-14T15:50:31Z",
      "side": 1,
      "message": "I actually think that the version and sha1 values should be included in a (new) build artifact that go/ab produces.",
      "parentUuid": "b5d8f4e4_bdfad5a4",
      "range": {
        "startLine": 177,
        "startChar": 40,
        "endLine": 177,
        "endChar": 44
      },
      "revId": "595fc91affce7360261e3b079b7dae4c8f4adbf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "890aedb5_f099f40a",
        "filename": "gki/download_from_ci",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-06-14T16:25:20Z",
      "side": 1,
      "message": "looks like kernel_version in https://www.kernel.org/doc/Documentation/x86/boot.txt is what\u0027s needed here, so another option (since this is python already) would just be to read the uint16 at 0x20e, then read the NUL-terminated string at that + 0x200. (like maennich said, even if you do have a file(1) that displays the version number, the exact output changes over time. it\u0027s a great tool for humans, but not so great for scripting.)\n\ni\u0027ll add this to toybox file anyway (because we still have lots of humans lying around), but it\u0027s still probably not a great idea to rely on it.",
      "parentUuid": "7a925ff8_ee1c20e4",
      "range": {
        "startLine": 177,
        "startChar": 40,
        "endLine": 177,
        "endChar": 44
      },
      "revId": "595fc91affce7360261e3b079b7dae4c8f4adbf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "96e713df_df00b277",
        "filename": "gki/download_from_ci",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-06-15T02:43:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "890aedb5_f099f40a",
      "range": {
        "startLine": 177,
        "startChar": 40,
        "endLine": 177,
        "endChar": 44
      },
      "revId": "595fc91affce7360261e3b079b7dae4c8f4adbf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b7f74ae_a11e1d29",
        "filename": "gki/download_from_ci",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-06-15T03:33:10Z",
      "side": 1,
      "message": "(and for any meatbags messing around on the command line, here\u0027s the toybox file support for x86 and arm64 kernel images: http://lists.landley.net/pipermail/toybox-landley.net/2022-June/012914.html)",
      "parentUuid": "96e713df_df00b277",
      "range": {
        "startLine": 177,
        "startChar": 40,
        "endLine": 177,
        "endChar": 44
      },
      "revId": "595fc91affce7360261e3b079b7dae4c8f4adbf8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}