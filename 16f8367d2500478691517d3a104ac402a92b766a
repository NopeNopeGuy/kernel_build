{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "700efa35_e3ba9d71",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 7,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2024-04-17T23:07:44Z",
      "side": 1,
      "message": "This commit message has very limited information about what is done and why. Please document the change approprietly.",
      "revId": "16f8367d2500478691517d3a104ac402a92b766a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fbde06db_07ce00fb",
        "filename": "init/init_ddk.py",
        "patchSetId": 11
      },
      "lineNbr": 40,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2024-04-17T23:07:44Z",
      "side": 1,
      "message": "There is quite a lot that could go wrong here ... 404, file or directory cannot be opened, insufficient storage space. I think _some_ error handling would make sense.",
      "revId": "16f8367d2500478691517d3a104ac402a92b766a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2a61376_f07985d4",
        "filename": "init/init_ddk.py",
        "patchSetId": 11
      },
      "lineNbr": 40,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2024-04-17T23:07:44Z",
      "side": 1,
      "message": "The python style guide discourages abbreviations.\n\nhttps://google.github.io/styleguide/pyguide.html#316-naming",
      "range": {
        "startLine": 40,
        "startChar": 44,
        "endLine": 40,
        "endChar": 45
      },
      "fixSuggestions": [
        {
          "fixId": "2c35a59a_9ce5b17c",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "init/init_ddk.py",
              "range": {
                "startLine": 40,
                "startChar": 0,
                "endLine": 42,
                "endChar": 0
              },
              "replacement": "with urllib.request.urlopen(sys.argv[1]) as input_file, open(sys.argv[2], \"wb\") as output_file:\n    shutil.copyfileobj(input_file, output_file)\n"
            }
          ]
        }
      ],
      "revId": "16f8367d2500478691517d3a104ac402a92b766a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6224d11c_17fc9788",
        "filename": "init/init_ddk.py",
        "patchSetId": 11
      },
      "lineNbr": 40,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2024-04-17T23:16:33Z",
      "side": 1,
      "message": "throwing them out correctly exits the program with non-zero status code, right?\n\nWe could prettify the error message by suppressing the stack trace, perhaps",
      "parentUuid": "fbde06db_07ce00fb",
      "revId": "16f8367d2500478691517d3a104ac402a92b766a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7264f76f_0604f392",
        "filename": "init/init_ddk.py",
        "patchSetId": 11
      },
      "lineNbr": 75,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2024-04-17T23:07:44Z",
      "side": 1,
      "message": "It really is time for a `dataclass` ...",
      "revId": "16f8367d2500478691517d3a104ac402a92b766a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64832e22_b22d86d3",
        "filename": "init/init_ddk.py",
        "patchSetId": 11
      },
      "lineNbr": 75,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2024-04-17T23:16:33Z",
      "side": 1,
      "message": "or we set `self.cmd_args \u003d cmd_args`?",
      "parentUuid": "7264f76f_0604f392",
      "revId": "16f8367d2500478691517d3a104ac402a92b766a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8dccbc6_d609a873",
        "filename": "init/init_ddk.py",
        "patchSetId": 11
      },
      "lineNbr": 75,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2024-04-18T09:39:42Z",
      "side": 1,
      "message": "or that, but it does not describe the ` | None \u003d default value` semantics. Instead, those are hidden even further.",
      "parentUuid": "64832e22_b22d86d3",
      "revId": "16f8367d2500478691517d3a104ac402a92b766a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "563e0dec_13bbf2bd",
        "filename": "init/init_ddk.py",
        "patchSetId": 11
      },
      "lineNbr": 198,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2024-04-17T23:07:44Z",
      "side": 1,
      "message": "`None` is a valid value for this data member and I am somewhat certain it will cause issues when passed to the script ...",
      "range": {
        "startLine": 198,
        "startChar": 26,
        "endLine": 198,
        "endChar": 34
      },
      "revId": "16f8367d2500478691517d3a104ac402a92b766a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98738ce4_1de5f49c",
        "filename": "init/init_ddk.py",
        "patchSetId": 11
      },
      "lineNbr": 198,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2024-04-17T23:16:33Z",
      "side": 1,
      "message": "+1. This should probably do the same check as https://cs.android.com/android/kernel/superproject/+/common-android-mainline:build/kernel/kleaf/impl/kernel_prebuilt_repo.bzl;l\u003d168;drc\u003de3d80b666b653d4ac83e542ff11d2b8dfb2f3fae .",
      "parentUuid": "563e0dec_13bbf2bd",
      "range": {
        "startLine": 198,
        "startChar": 26,
        "endLine": 198,
        "endChar": 34
      },
      "revId": "16f8367d2500478691517d3a104ac402a92b766a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cd718d5_38b6790c",
        "filename": "init/init_ddk.py",
        "patchSetId": 11
      },
      "lineNbr": 206,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2024-04-17T23:07:44Z",
      "side": 1,
      "message": "how do we make sure this points to the host toolchain?",
      "range": {
        "startLine": 206,
        "startChar": 14,
        "endLine": 206,
        "endChar": 21
      },
      "fixSuggestions": [
        {
          "fixId": "d667b2fd_1944520f",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "init/init_ddk.py",
              "range": {
                "startLine": 206,
                "startChar": 0,
                "endLine": 207,
                "endChar": 0
              },
              "replacement": "            [\"/usr/bin/python3\", \"-c\", _DOWNLOAD_SCRIPT, url, out_file_name],\n"
            }
          ]
        }
      ],
      "revId": "16f8367d2500478691517d3a104ac402a92b766a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "670f8d62_3a5dfe0d",
        "filename": "init/init_ddk.py",
        "patchSetId": 11
      },
      "lineNbr": 206,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2024-04-17T23:16:33Z",
      "side": 1,
      "message": "We should just let PATH/which do the discovery, right? For example, if the user deliberately calls this in some user-defined environment with a custom PATH, we shouldn\u0027t stop them from doing that.",
      "parentUuid": "8cd718d5_38b6790c",
      "range": {
        "startLine": 206,
        "startChar": 14,
        "endLine": 206,
        "endChar": 21
      },
      "revId": "16f8367d2500478691517d3a104ac402a92b766a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f274b6c_8dbd7995",
        "filename": "init/init_ddk.py",
        "patchSetId": 11
      },
      "lineNbr": 206,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2024-04-18T09:39:42Z",
      "side": 1,
      "message": "Then `/usr/bin/env python3` ? \n\nI am still thinking whether we need this subprocess call. All we need is the certificates, right? Can we somehow import the ones from the host instead?\n\nOn my machine:\n```\n$ python3 -m certifi\n/etc/ssl/certs/ca-certificates.crt\n```",
      "parentUuid": "670f8d62_3a5dfe0d",
      "range": {
        "startLine": 206,
        "startChar": 14,
        "endLine": 206,
        "endChar": 21
      },
      "revId": "16f8367d2500478691517d3a104ac402a92b766a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90025e0f_14cc948b",
        "filename": "init/init_ddk.py",
        "patchSetId": 11
      },
      "lineNbr": 206,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2024-04-18T20:25:59Z",
      "side": 1,
      "message": "certifi doesn\u0027t seem to be a standard python library; it is on PyPI. That\u0027s odd; urllib is a standard Python library, so I assume it shouldn\u0027t rely on certifi, a non-standard library, right? I wonder how urllib determines the certificates to use when calling `urllib.request`.",
      "parentUuid": "7f274b6c_8dbd7995",
      "range": {
        "startLine": 206,
        "startChar": 14,
        "endLine": 206,
        "endChar": 21
      },
      "revId": "16f8367d2500478691517d3a104ac402a92b766a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ce4f778_9dec2a0a",
        "filename": "init/init_ddk.py",
        "patchSetId": 11
      },
      "lineNbr": 206,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2024-04-18T20:45:03Z",
      "side": 1,
      "message": "we could also hardcode this path: https://serverfault.com/a/722646 I wonder if there\u0027s a built-in way to determine this path",
      "parentUuid": "90025e0f_14cc948b",
      "range": {
        "startLine": 206,
        "startChar": 14,
        "endLine": 206,
        "endChar": 21
      },
      "revId": "16f8367d2500478691517d3a104ac402a92b766a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b82a5676_daa7fbc4",
        "filename": "init/init_ddk.py",
        "patchSetId": 11
      },
      "lineNbr": 206,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2024-04-18T21:00:19Z",
      "side": 1,
      "message": "It looks like by default, urllib relies on openssl to determine where the default cert is:\n\nhttps://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_default_verify_paths\n\nbut I fail to find the source code for set_default_verify_paths. It is probably implemented natively? Or perhaps we can call `openssl` to get the default verify paths.",
      "parentUuid": "7f274b6c_8dbd7995",
      "range": {
        "startLine": 206,
        "startChar": 14,
        "endLine": 206,
        "endChar": 21
      },
      "revId": "16f8367d2500478691517d3a104ac402a92b766a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56f2da36_91208668",
        "filename": "init/init_ddk.py",
        "patchSetId": 11
      },
      "lineNbr": 207,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2024-04-17T23:07:44Z",
      "side": 1,
      "message": "Is this redirection necessary if the output is not used at all? Would that not just swallow the errors?",
      "range": {
        "startLine": 207,
        "startChar": 0,
        "endLine": 207,
        "endChar": 37
      },
      "fixSuggestions": [
        {
          "fixId": "7253829d_53ebcb64",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "init/init_ddk.py",
              "range": {
                "startLine": 206,
                "startChar": 0,
                "endLine": 208,
                "endChar": 0
              },
              "replacement": "            [\"python3\", \"-c\", _DOWNLOAD_SCRIPT, url, out_file_name]\n"
            }
          ]
        }
      ],
      "revId": "16f8367d2500478691517d3a104ac402a92b766a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}