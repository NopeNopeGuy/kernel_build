{
  "comments": [
    {
      "key": {
        "uuid": "88e4dfba_44dfb331",
        "filename": "build.sh",
        "patchSetId": 3
      },
      "lineNbr": 359,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-08-14T09:23:13Z",
      "side": 1,
      "message": "Nick:\n\nThis flag is not properly propagated in the kernel build when using HOSTLD\u003dld.lld.\nLikely we can fix this upstream.",
      "range": {
        "startLine": 359,
        "startChar": 4,
        "endLine": 359,
        "endChar": 52
      },
      "revId": "ccd155aa1ffee6fc47b5e2e82db08c6826e3cf82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "502743ad_309f791a",
        "filename": "build.sh",
        "patchSetId": 3
      },
      "lineNbr": 359,
      "author": {
        "id": 1114194
      },
      "writtenOn": "2020-08-14T19:07:14Z",
      "side": 1,
      "message": "`-fuse-ld\u003dld.lld` is a compiler flag, not a linker flag, since the compiler is the \"driver\". Try HOSTCFLAGS?",
      "parentUuid": "88e4dfba_44dfb331",
      "range": {
        "startLine": 359,
        "startChar": 4,
        "endLine": 359,
        "endChar": 52
      },
      "revId": "ccd155aa1ffee6fc47b5e2e82db08c6826e3cf82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a356fab_1b18375e",
        "filename": "build.sh",
        "patchSetId": 3
      },
      "lineNbr": 359,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-08-14T19:12:06Z",
      "side": 1,
      "message": "I was not that clear: \nThis version of the code works (it also works with HOSTCFLAGS, actually). Still, I believe setting just HOSTLD\u003dld.lld should be enough to make it just work. But it is not as \u0027ld\u0027 still gets used when HOST*FLAGS is _not_ set.\n\nSo, I think the upstream patch would need to propagate HOSTLD\u003dld.lld down to the HOSTCFLAGS or HOSTLDFLAGS.",
      "parentUuid": "502743ad_309f791a",
      "range": {
        "startLine": 359,
        "startChar": 4,
        "endLine": 359,
        "endChar": 52
      },
      "revId": "ccd155aa1ffee6fc47b5e2e82db08c6826e3cf82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6773082_09334ad1",
        "filename": "build.sh",
        "patchSetId": 3
      },
      "lineNbr": 359,
      "author": {
        "id": 1114194
      },
      "writtenOn": "2020-08-14T22:47:33Z",
      "side": 1,
      "message": "Probably could revist https://lkml.org/lkml/2019/2/11/1947 then; it was sent upstream and pulled into kernel-msm-pixel-4.14 branch (26bbb793c7eb43f25e37bafd3ae9455d2728dac6) but never landed in upstream; instead we ripped out cc-ldoption.\n\nActually, with a move to LLVM\u003d1, we could add `-fuse-ld\u003dld.lld` to the HOSTCFLAGS.\n\n(I consider this a build hermiticity issue; relying on the compilers implicit default value for `-fuse-ld\u003d` vs being explicit.)",
      "parentUuid": "8a356fab_1b18375e",
      "range": {
        "startLine": 359,
        "startChar": 4,
        "endLine": 359,
        "endChar": 52
      },
      "revId": "ccd155aa1ffee6fc47b5e2e82db08c6826e3cf82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e399b5a1_e6aea6f8",
        "filename": "build.sh",
        "patchSetId": 3
      },
      "lineNbr": 359,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-08-20T18:50:32Z",
      "side": 1,
      "message": "I will do the upstreaming at a later point. This patch as of here solves this category of issue for a range of kernels. not only android-mainline ... So, I think we should take this now.",
      "parentUuid": "a6773082_09334ad1",
      "range": {
        "startLine": 359,
        "startChar": 4,
        "endLine": 359,
        "endChar": 52
      },
      "revId": "ccd155aa1ffee6fc47b5e2e82db08c6826e3cf82",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}