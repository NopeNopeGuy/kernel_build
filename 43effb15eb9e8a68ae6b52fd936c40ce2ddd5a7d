{
  "comments": [
    {
      "key": {
        "uuid": "3d298340_3fa055fc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 25
      },
      "lineNbr": 0,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-28T16:54:27Z",
      "side": 1,
      "message": "Please rework the commit message to describe what this change actually does, not it\u0027s history.",
      "revId": "43effb15eb9e8a68ae6b52fd936c40ce2ddd5a7d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a770e14_278be690",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 25
      },
      "lineNbr": 162,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-28T16:54:27Z",
      "side": 1,
      "message": "I would prefer returning (None, []) or even (None, None) to avoid misuse of the API",
      "range": {
        "startLine": 162,
        "startChar": 8,
        "endLine": 162,
        "endChar": 21
      },
      "revId": "43effb15eb9e8a68ae6b52fd936c40ce2ddd5a7d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb898371_99ba7b05",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 25
      },
      "lineNbr": 162,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-31T01:40:06Z",
      "side": 1,
      "message": "I believe I\u0027ve pointed this out previously.  Returning None here causes pytype to produce\na type error.  In Python an empty string is False when tested conditionally.  Changing the\ntype declaration of extract_c_src() to return either a str or None (or some universal\ntype compatible with None) seems overly obfuscated.  I don\u0027t see an issue with caller\nknowing what they are calling and following its documentation.",
      "parentUuid": "9a770e14_278be690",
      "range": {
        "startLine": 162,
        "startChar": 8,
        "endLine": 162,
        "endChar": 21
      },
      "revId": "43effb15eb9e8a68ae6b52fd936c40ce2ddd5a7d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bcf9858b_c226f7a5",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 25
      },
      "lineNbr": 423,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-28T16:54:27Z",
      "side": 1,
      "message": "return None to avoid misuse",
      "revId": "43effb15eb9e8a68ae6b52fd936c40ce2ddd5a7d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "330d28cc_9a228b27",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 25
      },
      "lineNbr": 423,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-31T01:40:06Z",
      "side": 1,
      "message": "I believe I\u0027ve pointed this out previously.  Returning None here causes pytype to produce\na type error.  In Python an empty string is False when tested conditionally.  Changing the\ntype declaration of get_error() to return either a str or None (or some universal\ntype compatible with None) seems overly obfuscated.  I don\u0027t see an issue with caller\nknowing what they are calling and following its documentation.  Note that get_error() is\nimplemented elsewhere and there its return type is also str.",
      "parentUuid": "bcf9858b_c226f7a5",
      "revId": "43effb15eb9e8a68ae6b52fd936c40ce2ddd5a7d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3665232b_68465cee",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 25
      },
      "lineNbr": 458,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-28T16:54:27Z",
      "side": 1,
      "message": "would be nice if you could split this up a bit. e.g. replace the loop by\n\n self._targets \u003d process_object_files()\n\n\nDepending on whether my next suggestion works out (using only .cmd), you might want to split the obj file processing even further ...",
      "revId": "43effb15eb9e8a68ae6b52fd936c40ce2ddd5a7d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73ffd3bd_f85b0664",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 25
      },
      "lineNbr": 458,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-31T01:40:06Z",
      "side": 1,
      "message": "Yes, the code just grew over the pylint3 complexity barrier when the variable _ was used so now it has this error:\n   kmi_defines.py:463:4: R0914: Too many local variables (16/15) (too-many-locals)\n(that was from the removal of the makefile_assignment_right() function that you made).\n\nThat means that I will continue to see that error until I address this pylint3 regression.\nNo need to track it independently here because of that. Don\u0027t want to leave comments\nunresolved to track things if there is already a way to track them.",
      "parentUuid": "3665232b_68465cee",
      "revId": "43effb15eb9e8a68ae6b52fd936c40ce2ddd5a7d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59a2d88c_786adc98",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 25
      },
      "lineNbr": 494,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-28T16:54:27Z",
      "side": 1,
      "message": "I wonder whether we can extract this from the cmd file already. To have the .keep file around requires a kernel patch. I would like to avoid that. Is this reasonable?",
      "revId": "43effb15eb9e8a68ae6b52fd936c40ce2ddd5a7d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9767ab8a_505c6c95",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 25
      },
      "lineNbr": 494,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-31T01:40:06Z",
      "side": 1,
      "message": "So the answer is yes. I will be including that change sooner than later.",
      "parentUuid": "59a2d88c_786adc98",
      "revId": "43effb15eb9e8a68ae6b52fd936c40ce2ddd5a7d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6827fe1_01278d17",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 25
      },
      "lineNbr": 525,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-28T16:54:27Z",
      "side": 1,
      "message": "combine those",
      "range": {
        "startLine": 521,
        "startChar": 0,
        "endLine": 525,
        "endChar": 72
      },
      "revId": "43effb15eb9e8a68ae6b52fd936c40ce2ddd5a7d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fadd76e7_61a0b93b",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 25
      },
      "lineNbr": 525,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-31T01:40:06Z",
      "side": 1,
      "message": "They are different errors, they don\u0027t need to be combined into a less detailed error.",
      "parentUuid": "f6827fe1_01278d17",
      "range": {
        "startLine": 521,
        "startChar": 0,
        "endLine": 525,
        "endChar": 72
      },
      "revId": "43effb15eb9e8a68ae6b52fd936c40ce2ddd5a7d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9d47ad03_56e98781",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 25
      },
      "lineNbr": 547,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-28T16:54:27Z",
      "side": 1,
      "message": "I would rather like to see\n\n  raise KernelComponentCreationError\n\nhere, but I understand that this might become tricky when running this on the whole build tree with multiprocessing.",
      "revId": "43effb15eb9e8a68ae6b52fd936c40ce2ddd5a7d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90d99990_2b0753fe",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 25
      },
      "lineNbr": 547,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-31T01:40:06Z",
      "side": 1,
      "message": "I think it works ok and the flow is very comprehensible as it is. One is the error raised,\nthe other is what stands for a failed KernelComponent that when run in parallel failed.\nSequential execution is mostly for debug.",
      "parentUuid": "9d47ad03_56e98781",
      "revId": "43effb15eb9e8a68ae6b52fd936c40ce2ddd5a7d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76d4342a_cb356457",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 25
      },
      "lineNbr": 571,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-28T16:54:27Z",
      "side": 1,
      "message": "measurable",
      "range": {
        "startLine": 571,
        "startChar": 35,
        "endLine": 571,
        "endChar": 44
      },
      "revId": "43effb15eb9e8a68ae6b52fd936c40ce2ddd5a7d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aac855e7_789b0fcf",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 25
      },
      "lineNbr": 571,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-31T01:40:06Z",
      "side": 1,
      "message": "Fixed in patch set 27",
      "parentUuid": "76d4342a_cb356457",
      "range": {
        "startLine": 571,
        "startChar": 35,
        "endLine": 571,
        "endChar": 44
      },
      "revId": "43effb15eb9e8a68ae6b52fd936c40ce2ddd5a7d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b54d7e9_d3e07300",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 25
      },
      "lineNbr": 652,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-01-28T16:54:27Z",
      "side": 1,
      "message": "with the TODO addressed and KernelComponentCreationError implemented as Exception, the code could look like this\n\n    try:\n      comp \u003d kernel_component_factory(args.file)\n    except KernelComponentCreationError as e:\n      logging(e.message()\n      return 1\n\nSimilar above in work_on_whole_build(), but that requires a bit more work to collect the error.",
      "range": {
        "startLine": 643,
        "startChar": 0,
        "endLine": 652,
        "endChar": 16
      },
      "revId": "43effb15eb9e8a68ae6b52fd936c40ce2ddd5a7d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7f392f9_5ed6c451",
        "filename": "abi/kmi_defines.py",
        "patchSetId": 25
      },
      "lineNbr": 652,
      "author": {
        "id": 1428004
      },
      "writtenOn": "2020-01-31T01:40:06Z",
      "side": 1,
      "message": "Yes, but this single component path is for ongoing debugging. See comment above.",
      "parentUuid": "4b54d7e9_d3e07300",
      "range": {
        "startLine": 643,
        "startChar": 0,
        "endLine": 652,
        "endChar": 16
      },
      "revId": "43effb15eb9e8a68ae6b52fd936c40ce2ddd5a7d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}