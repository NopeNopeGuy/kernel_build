{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a4c65dee_2a1ceb27",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-08-10T16:50:35Z",
      "side": 1,
      "message": "not yet done with this one yet.",
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "abf75c2d_0ef24402",
        "filename": "kleaf/build_config_to_bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 17,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-08-10T16:50:35Z",
      "side": 1,
      "message": "go/pystyle#module-docs\n\nhttps://google.github.io/styleguide/pyguide.html#382-modules",
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "41289816_95de3532",
        "filename": "kleaf/build_config_to_bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 17,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-08-10T22:03:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "abf75c2d_0ef24402",
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8082411c_50ceaea9",
        "filename": "kleaf/build_config_to_bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 35,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-08-10T16:50:35Z",
      "side": 1,
      "message": "_CAPS_WITH_UNDER\n\nhttps://google.github.io/styleguide/pyguide.html#382-modules",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 35,
        "endChar": 19
      },
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1013d899_d20228d4",
        "filename": "kleaf/build_config_to_bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 35,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-08-10T22:03:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8082411c_50ceaea9",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 35,
        "endChar": 19
      },
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6cbd91c_9dc696a7",
        "filename": "kleaf/build_config_to_bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 36,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-08-10T16:50:35Z",
      "side": 1,
      "message": "is that a return code?",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 36,
        "endChar": 25
      },
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0903f461_c6997915",
        "filename": "kleaf/build_config_to_bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 36,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-08-10T19:46:34Z",
      "side": 1,
      "message": "Yes, what about it?\n\nThis is documented in buildozer\u0027s doc, in the module docstring.",
      "parentUuid": "d6cbd91c_9dc696a7",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 36,
        "endChar": 25
      },
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f92d6c80_32118f3a",
        "filename": "kleaf/build_config_to_bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 36,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-08-11T15:47:52Z",
      "side": 1,
      "message": "I like the revised name more :-) thanks!",
      "parentUuid": "0903f461_c6997915",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 36,
        "endChar": 25
      },
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69c0f83f_557fff60",
        "filename": "kleaf/build_config_to_bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 45,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-08-10T16:50:35Z",
      "side": 1,
      "message": "this is occasionally set by build.config files. perhaps some of them need to go into a separate list to flag as unsupported.",
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "831d1e59_ff7f52e8",
        "filename": "kleaf/build_config_to_bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 45,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-08-10T22:03:26Z",
      "side": 1,
      "message": "Do you mean it is being set to 0 by some build.config files, and we should flag this?",
      "parentUuid": "69c0f83f_557fff60",
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b35125e2_5a5895f1",
        "filename": "kleaf/build_config_to_bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 45,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-08-11T15:47:52Z",
      "side": 1,
      "message": "occasionally we cannot build all configurations with the hermetic tools (e.g. allmodconfig builds). In that case we need to let more host tools sneak in. We did this by either disabling the hermetic tools `HERMETIC_TOOLCHAIN\u003d0` or by adding `ADDITIONAL_HOST_TOOLS\u003d...`. Perhaps the latter approach works better in the Kleaf world and should somehow be supported. OTOH, the solution for additional host tools might look very different in Kleaf and we might drop this support here altogether.",
      "parentUuid": "831d1e59_ff7f52e8",
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36b2acc6_3d831fb4",
        "filename": "kleaf/build_config_to_bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 52,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-08-10T16:50:35Z",
      "side": 1,
      "message": "another \"unsupported, but used\"",
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6cabefc_4018ef31",
        "filename": "kleaf/build_config_to_bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 52,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-08-10T22:03:26Z",
      "side": 1,
      "message": "It is actually \"supported\" to some degree. If the command just reads and checks files, it should be kept as is. If the command deletes defconfig files then it needs to be handled with\n\nhttps://android.googlesource.com/kernel/build/+/refs/heads/master/kleaf/docs/errors.md#defconfig-readonly\n\nBut this URL link is already shown in PRE_DEFCONFIG_CMDS. So I think it is safe to just ignore POST_DEFCONFIG_CMDS here.",
      "parentUuid": "36b2acc6_3d831fb4",
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c95fa3a2_4471b29e",
        "filename": "kleaf/build_config_to_bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 69,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-08-10T16:50:35Z",
      "side": 1,
      "message": "definitely needs translation for arm64 vs x86_64",
      "range": {
        "startLine": 69,
        "startChar": 5,
        "endLine": 69,
        "endChar": 9
      },
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "676b8a0d_f5d5ef9f",
        "filename": "kleaf/build_config_to_bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 69,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-08-10T19:46:34Z",
      "side": 1,
      "message": "We don\u0027t differ kernel_build between them.",
      "parentUuid": "c95fa3a2_4471b29e",
      "range": {
        "startLine": 69,
        "startChar": 5,
        "endLine": 69,
        "endChar": 9
      },
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ee315a2_46c25a5d",
        "filename": "kleaf/build_config_to_bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 133,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-08-10T16:50:35Z",
      "side": 1,
      "message": "die()",
      "range": {
        "startLine": 133,
        "startChar": 4,
        "endLine": 133,
        "endChar": 8
      },
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8cb045e_4fbadd74",
        "filename": "kleaf/build_config_to_bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 133,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-08-10T22:03:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4ee315a2_46c25a5d",
      "range": {
        "startLine": 133,
        "startChar": 4,
        "endLine": 133,
        "endChar": 8
      },
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "608a6a96_81b26f9d",
        "filename": "kleaf/build_config_to_bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 134,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-08-10T16:50:35Z",
      "side": 1,
      "message": "critical, since you die in the next line",
      "range": {
        "startLine": 134,
        "startChar": 12,
        "endLine": 134,
        "endChar": 17
      },
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ddcb300_4555631e",
        "filename": "kleaf/build_config_to_bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 134,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-08-10T22:03:26Z",
      "side": 1,
      "message": "The message would be\n\n```\nCRITICAL: error message here\n```\n\nBut with .error it is\n\n```\nERROR: error message here\n```\n\nI think the latter is much more visible. (Of course I can change how logging works in config_logging, but I think it is easier to just use .error here)",
      "parentUuid": "608a6a96_81b26f9d",
      "range": {
        "startLine": 134,
        "startChar": 12,
        "endLine": 134,
        "endChar": 17
      },
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13eeb436_e710fdf5",
        "filename": "kleaf/build_config_to_bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 134,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-08-11T15:47:52Z",
      "side": 1,
      "message": "agreed.",
      "parentUuid": "7ddcb300_4555631e",
      "range": {
        "startLine": 134,
        "startChar": 12,
        "endLine": 134,
        "endChar": 17
      },
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1cc0e0c_62d81b31",
        "filename": "kleaf/build_config_to_bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 138,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-08-10T16:50:35Z",
      "side": 1,
      "message": "isinstance_ordie",
      "range": {
        "startLine": 138,
        "startChar": 4,
        "endLine": 138,
        "endChar": 20
      },
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f83c54a_859a393c",
        "filename": "kleaf/build_config_to_bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 138,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-08-10T22:03:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b1cc0e0c_62d81b31",
      "range": {
        "startLine": 138,
        "startChar": 4,
        "endLine": 138,
        "endChar": 20
      },
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a54b7a4_136f77b3",
        "filename": "kleaf/build_config_to_bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 148,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-08-10T16:50:35Z",
      "side": 1,
      "message": "is that `os.path.realpath()`?\n\nhttps://docs.python.org/3.10/library/os.path.html#os.path.realpath",
      "range": {
        "startLine": 148,
        "startChar": 4,
        "endLine": 148,
        "endChar": 20
      },
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9dd9693b_0a251e4d",
        "filename": "kleaf/build_config_to_bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 148,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-08-10T22:03:26Z",
      "side": 1,
      "message": "No. realpath is like `readlink -e`. I intended to do\n\n```\nif [[ -l $x ]]; then readlink $x; else echo $x; fi\n```\n\nIn this case, the top level `build.config` will point to a relative path `path/to/package/build.config.device_name`, and this `readlink_if_link` function will return the relative path.\n\nrealpath returns an absolute path.\n\nBut of course, I can do `relpath(realpath(x))` here. WDYT? (See latest PS)",
      "parentUuid": "3a54b7a4_136f77b3",
      "range": {
        "startLine": 148,
        "startChar": 4,
        "endLine": 148,
        "endChar": 20
      },
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a64796e4_b55c9fe1",
        "filename": "kleaf/build_config_to_bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 148,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-08-11T15:47:52Z",
      "side": 1,
      "message": "and that is why I do not like this build.config symlink feature :-)\n\nI like relpath(realpath(x)) as a solid solution.",
      "parentUuid": "9dd9693b_0a251e4d",
      "range": {
        "startLine": 148,
        "startChar": 4,
        "endLine": 148,
        "endChar": 20
      },
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37781f25_e436dae8",
        "filename": "kleaf/build_config_to_bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 159,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-08-10T16:50:35Z",
      "side": 1,
      "message": "not sure that mechanism is still used and whether we need to support this here.",
      "range": {
        "startLine": 159,
        "startChar": 40,
        "endLine": 159,
        "endChar": 62
      },
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "936c7c16_be255024",
        "filename": "kleaf/build_config_to_bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 159,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-08-10T22:03:26Z",
      "side": 1,
      "message": "The script intends to \"help people transition from build.sh with build config to Bazel\". build.sh supports this, so this script should also support this.",
      "parentUuid": "37781f25_e436dae8",
      "range": {
        "startLine": 159,
        "startChar": 40,
        "endLine": 159,
        "endChar": 62
      },
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab9cd194_9136c672",
        "filename": "kleaf/build_config_to_bazel_test.py",
        "patchSetId": 12
      },
      "lineNbr": 37,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-08-10T16:50:35Z",
      "side": 1,
      "message": "if you are using this as a file-like object, perhaps you can use an in-memory version of that with `io.StringIO`. That would also give you `.getvalue()` to avoid the seeking.\n\nhttps://docs.python.org/3.10/library/io.html#io.StringIO\n\n\nAh, now I see that you are passing this to `buildozer` by name. Then perhaps that does not work. Disregard in that case.",
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1050fa1e_5c26d233",
        "filename": "kleaf/build_config_to_bazel_test.py",
        "patchSetId": 12
      },
      "lineNbr": 37,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-08-10T19:46:34Z",
      "side": 1,
      "message": "I think StringIO would work; let me try that. This is not passed to buildozer.",
      "parentUuid": "ab9cd194_9136c672",
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "76c8bb38_56c86a4b",
        "filename": "kleaf/build_config_to_bazel_test.py",
        "patchSetId": 12
      },
      "lineNbr": 37,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-08-10T22:07:34Z",
      "side": 1,
      "message": "Ah StringIO can\u0027t be passed to subprocess module as stdout / stderr:\n\n```\n  File \"/usr/lib/python3.10/subprocess.py\", line 420, in check_output\n    return run(*popenargs, stdout\u003dPIPE, timeout\u003dtimeout, check\u003dTrue,\n  File \"/usr/lib/python3.10/subprocess.py\", line 501, in run\n    with Popen(*popenargs, **kwargs) as process:\n  File \"/usr/lib/python3.10/subprocess.py\", line 835, in __init__\n    errread, errwrite) \u003d self._get_handles(stdin, stdout, stderr)\n  File \"/usr/lib/python3.10/subprocess.py\", line 1639, in _get_handles\n    errwrite \u003d stderr.fileno()\nio.UnsupportedOperation: fileno\n```",
      "parentUuid": "1050fa1e_5c26d233",
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1161196f_17a91115",
        "filename": "kleaf/build_config_to_bazel_test.py",
        "patchSetId": 12
      },
      "lineNbr": 39,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-08-10T16:50:35Z",
      "side": 1,
      "message": "are you doing this to keep the file alive?\n\naccording to the documentation, you should be able to omit those lines:\n\n```\nIt will be destroyed as soon as it is closed (including an implicit close when the object is garbage collected).\n```\nhttps://docs.python.org/3.10/library/tempfile.html#tempfile.TemporaryFile",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 39,
        "endChar": 63
      },
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ff17cd7_66334477",
        "filename": "kleaf/build_config_to_bazel_test.py",
        "patchSetId": 12
      },
      "lineNbr": 39,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-08-10T19:46:34Z",
      "side": 1,
      "message": "No, this is the line to close it after the test is finished.\n\nThis is like:\n\n```\nwith tempfile.TemporaryFile():\n  run_test()\n```",
      "parentUuid": "1161196f_17a91115",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 39,
        "endChar": 63
      },
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9671b80f_6379ca5d",
        "filename": "kleaf/build_config_to_bazel_test.py",
        "patchSetId": 12
      },
      "lineNbr": 39,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-08-11T15:47:52Z",
      "side": 1,
      "message": "but you do not need to do this as the file will get garbage collected and is guaranteed to be unlinked. I think in this case readability wins over precise cleanup.",
      "parentUuid": "6ff17cd7_66334477",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 39,
        "endChar": 63
      },
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "580296f7_2bf1644e",
        "filename": "kleaf/build_config_to_bazel_test.py",
        "patchSetId": 12
      },
      "lineNbr": 39,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-08-12T19:31:10Z",
      "side": 1,
      "message": "Oh \"including an implicit close when the object is garbage collected\"; I missed this part!",
      "parentUuid": "9671b80f_6379ca5d",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 39,
        "endChar": 63
      },
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f568207_201da952",
        "filename": "kleaf/build_config_to_bazel_test.py",
        "patchSetId": 12
      },
      "lineNbr": 72,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-08-10T16:50:35Z",
      "side": 1,
      "message": "that looks like parameterized tests could make this a little more compact.\n\nIn particular the self.assertIn can basically be fed from an (annotted) array of strings.",
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7947fa7f_799c4dac",
        "filename": "kleaf/build_config_to_bazel_test.py",
        "patchSetId": 12
      },
      "lineNbr": 72,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-08-10T19:46:34Z",
      "side": 1,
      "message": "The array would be pretty unstructured though, especially with multiline strings.\n\nI personally don\u0027t think repeating `self.assertIn` is too much.",
      "parentUuid": "5f568207_201da952",
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a721e814_97ae1d74",
        "filename": "kleaf/build_config_to_bazel_test.py",
        "patchSetId": 12
      },
      "lineNbr": 72,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-08-11T15:47:52Z",
      "side": 1,
      "message": "defining the parameters with comments as in the text makes it perhaps more readable:\n\n```\nexpected_inclusions \u003d [\n  # Check defined targets\n  \u0027\"everything\"\u0027,\n  \u0027\"everything_dist\"\u0027,\n\n  # BUILD_CONFIG\n  \u0027build_config \u003d \"build.config.everything\"\u0027,  \n  # BUILD_CONFIG_FRAGMENTS\n  \"build.config.fragment\",  \n\n   ...\n]\n\ndef test_everything(self, expected):\n   out, err \u003d self._run_test(\"build.config.everything\")\n   self.assertIn(expected, out)\n```",
      "parentUuid": "7947fa7f_799c4dac",
      "revId": "1aac3012303b189a72dc8adde8b28b0c37935eb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}