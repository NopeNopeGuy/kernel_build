{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ff6ed1a8_de735c89",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1446383
      },
      "writtenOn": "2022-04-20T18:34:52Z",
      "side": 1,
      "message": "It\u0027s not clear to me why SCM version should be set correctly only for \"release\" config. All that SCM version is trying to capture is the git SHA from which a module was built. That should always work.",
      "revId": "c430feb1ddcd3eb86b139b974fb2c6986e8b4629",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bce9a1cf_94e7ed2f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1446383
      },
      "writtenOn": "2022-04-20T18:35:01Z",
      "side": 1,
      "message": "Marking unresolved.",
      "revId": "c430feb1ddcd3eb86b139b974fb2c6986e8b4629",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a634d805_b6a0719c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-04-21T01:00:34Z",
      "side": 1,
      "message": "The reason is that, when you touch any code (or even no code but documentation), SCM version changes to -dirty, triggerring unnecessary rebuild.\n\nWhat\u0027s worse, the mechanism to determine SCM version for the main kernel build (common/) and for modules (e.g. gs/google-modules/...) are tied together in a way that, touching code for external modules adds -dirty to the module\u0027s scmversion, but also unnecessarily changes the file that stores all SCM version, therefore re-trigering rebuilds for the main kernel.",
      "parentUuid": "ff6ed1a8_de735c89",
      "revId": "c430feb1ddcd3eb86b139b974fb2c6986e8b4629",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "221cb657_1691e145",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-04-21T01:00:34Z",
      "side": 1,
      "message": "resovling",
      "parentUuid": "bce9a1cf_94e7ed2f",
      "revId": "c430feb1ddcd3eb86b139b974fb2c6986e8b4629",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d033214c_f53f5b57",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-04-21T01:01:47Z",
      "side": 1,
      "message": "The technicalities are explained in b/228689043 if you are interested.",
      "parentUuid": "a634d805_b6a0719c",
      "revId": "c430feb1ddcd3eb86b139b974fb2c6986e8b4629",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6580a80_0b9aab97",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1066075
      },
      "writtenOn": "2022-04-21T06:48:19Z",
      "side": 1,
      "message": "Do I understand correctly that this fixes b/202077908 my making the KernelEnv / KernelBuild rules also use a nulled out scmversion in non-relesae builds, thereby making them consistent with the nulled-out scmversion forced on KernelModule by the sandbox?",
      "revId": "c430feb1ddcd3eb86b139b974fb2c6986e8b4629",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}