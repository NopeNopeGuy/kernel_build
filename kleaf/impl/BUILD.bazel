# Copyright (C) 2022 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Implementation details. These aren't part of the public API.

load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("@bazel_skylib//rules:common_settings.bzl", "bool_setting")
load(":cc_toolchain_config.bzl", "clang_config")

bzl_library(
    name = "impl",
    srcs = [
        "abi/abi_diff.bzl",
        "abi/abi_dump.bzl",
        "abi/abi_prop.bzl",
        "abi/abi_transitions.bzl",
        "abi/base_kernel_utils.bzl",
        "abi/extracted_symbols.bzl",
        "abi/force_add_vmlinux_utils.bzl",
        "abi/get_src_kmi_symbol_list.bzl",
        "abi/kernel_build_abi.bzl",
        "abi/kernel_build_abi_dist.bzl",
        "abi/trim_nonlisted_kmi_utils.bzl",
        "btf.bzl",
        "common_providers.bzl",
        "constants.bzl",
        "ddk/ddk_headers.bzl",
        "ddk/ddk_module.bzl",
        "ddk/ddk_submodule.bzl",
        "ddk/makefiles.bzl",
        "debug.bzl",
        "gki_artifacts.bzl",
        "image/boot_images.bzl",
        "image/dtbo.bzl",
        "image/image_utils.bzl",
        "image/initramfs.bzl",
        "image/kernel_images.bzl",
        "image/system_dlkm_image.bzl",
        "image/vendor_dlkm_image.bzl",
        "kernel_build.bzl",
        "kernel_build_config.bzl",
        "kernel_build_transition.bzl",
        "kernel_compile_commands.bzl",
        "kernel_config.bzl",
        "kernel_config_settings.bzl",
        "kernel_config_transition.bzl",
        "kernel_dtstree.bzl",
        "kernel_env.bzl",
        "kernel_filegroup.bzl",
        "kernel_headers.bzl",
        "kernel_kythe.bzl",
        "kernel_module.bzl",
        "kernel_module_group.bzl",
        "kernel_modules_install.bzl",
        "kernel_toolchain_aspect.bzl",
        "kernel_uapi_headers.bzl",
        "kernel_uapi_headers_cc_library.bzl",
        "kernel_unstripped_modules_archive.bzl",
        "kmi_symbol_list.bzl",
        "merged_kernel_uapi_headers.bzl",
        "modules_prepare.bzl",
        "out_headers_allowlist_archive.bzl",
        "raw_kmi_symbol_list.bzl",
        "srcs_aspect.bzl",
        "stamp.bzl",
        "status.bzl",
        "utils.bzl",
    ],
    visibility = ["//build/kernel/kleaf:__subpackages__"],
    deps = [
        "//build/kernel/kleaf:directory_with_structure_def",
        "//build/kernel/kleaf:hermetic_tools_def",
        "//build/kernel/kleaf:update_source_file_def",
        "@bazel_skylib//lib:collections",
        "@bazel_skylib//lib:paths",
        "@bazel_skylib//lib:sets",
        "@bazel_skylib//lib:shell",
        "@bazel_skylib//rules:common_settings",
    ],
)

# If true, also pack .cmd files as output.
bool_setting(
    name = "preserve_cmd",
    build_setting_default = False,
    # All kernel_* from different packages can see this
    visibility = ["//visibility:public"],
)

# Whether trimming is actually enabled.
bool_setting(
    name = "trim_nonlisted_kmi_setting",
    build_setting_default = False,
    # All kernel_* from different packages can see this
    visibility = ["//visibility:public"],
)

# Helper setting to forcefully disable trimming.
bool_setting(
    name = "force_disable_trim",
    build_setting_default = False,
    # All kernel_* from different packages can see this
    visibility = ["//visibility:public"],
)

# Forcefully add vmlinux to outs (implicitly) and to MAKE_GOALS.
bool_setting(
    name = "force_add_vmlinux",
    build_setting_default = False,
    # All kernel_* from different packages can see this
    visibility = ["//visibility:public"],
)

# Forcefully ignore base_kernel.
bool_setting(
    name = "force_ignore_base_kernel",
    build_setting_default = False,
    # All kernel_* from different packages can see this
    visibility = ["//visibility:public"],
)

py_binary(
    name = "ddk/gen_makefiles",
    srcs = ["ddk/gen_makefiles.py"],
    visibility = ["//visibility:public"],
    deps = [
        "@io_abseil_py//absl/flags:argparse_flags",
    ],
)

# CC

# Local build platforms
platform(
    name = "linux_x86_64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)

platform(
    name = "android_arm64",
    constraint_values = [
        "@platforms//os:android",
        "@platforms//cpu:arm64",
    ],
)

platform(
    name = "android_x86_64",
    constraint_values = [
        "@platforms//os:android",
        "@platforms//cpu:x86_64",
    ],
)

# FIXME version
filegroup(
    name = "clang_files",
    srcs = [
        "cc_toolchain_redirect/cc_toolchain_redirect.sh",
        "cc_toolchain_redirect/clang",
        "//prebuilts/clang/host/linux-x86/clang-r475365:binaries",
    ],
)

# CC: arm64

cc_toolchain_suite(
    name = "cc_toolchain_suite",
    toolchains = {
        "arm64": ":arm64_clang",
        "x86_64": ":x86_64_clang",
        # ??
        "k8": ":x86_64_clang",
    },
)

cc_toolchain(
    name = "arm64_clang",
    all_files = ":clang_files",
    # FIXME correct list of files
    compiler_files = ":clang_files",
    dwp_files = ":clang_files",
    linker_files = ":clang_files",
    objcopy_files = ":clang_files",
    strip_files = ":clang_files",
    supports_param_files = 0,
    toolchain_config = ":arm64_toolchain_config",
    toolchain_identifier = "arm64_clang_id",
)

clang_config(
    name = "arm64_toolchain_config",
    target_cpu = "arm64",
    toolchain_identifier = "arm64_clang_id",
)

# CC: x86_64

cc_toolchain(
    name = "x86_64_clang",
    all_files = ":clang_files",
    # FIXME correct list of files
    compiler_files = ":clang_files",
    dwp_files = ":clang_files",
    linker_files = ":clang_files",
    objcopy_files = ":clang_files",
    strip_files = ":clang_files",
    supports_param_files = 0,
    toolchain_config = ":x86_64_toolchain_config",
    toolchain_identifier = "x86_64_clang_id",
)

clang_config(
    name = "x86_64_toolchain_config",
    target_cpu = "x86_64",
    toolchain_identifier = "x86_64_clang_id",
)
