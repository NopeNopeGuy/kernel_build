#!/bin/bash

in_build_dir()
{
	if [ ! -f vmlinux.o -o \
	     ! -d drivers -o ! -d fs -o ! -d fs -o ! -d net -o \
	     ! -d source/drivers -o ! -d source/fs -o \
	     ! -d source/fs -o ! -d source/net ] ; then
		echo "$CMD: current directory is not Linux build directory" 1>&2
		return 1
	fi
	return 0
}

fold_dots()
{
	sed \
		-e 's?//*?/?g' \
		-e 's?^\./??' \
		-e 's?/\./?/?g' \
		-e 's?/[^/][^/]*/\.\./?/?' -e 's?^[^/][^/]*/\.\./??' \
		-e 's?/[^/][^/]*/\.\./?/?' -e 's?^[^/][^/]*/\.\./??' \
		-e 's?/[^/][^/]*/\.\./?/?' -e 's?^[^/][^/]*/\.\./??' \
		-e 's?/[^/][^/]*/\.\./?/?' -e 's?^[^/][^/]*/\.\./??' \
		-e 's?/[^/][^/]*/\.\./?/?' -e 's?^[^/][^/]*/\.\./??' \
		-e 's?/[^/][^/]*/\.\./?/?' -e 's?^[^/][^/]*/\.\./??' \
		-e 's?/[^/][^/]*/\.\./?/?' -e 's?^[^/][^/]*/\.\./??' \
		-e 's?/[^/][^/]*/\.\./?/?' -e 's?^[^/][^/]*/\.\./??' \
		-e 's?/[^/][^/]*/\.\./?/?' -e 's?^[^/][^/]*/\.\./??' \
		-e 's?/[^/][^/]*/\.\./?/?' -e 's?^[^/][^/]*/\.\./??'
}

#  Example standard input:
#  	foo.o: \
#  	  foo.c \
#  	  h1.h \
#  	  h2.h
#  Get rid of the "foo.o:" part, remove trailing back-slashes, compress
#  multi-character whitespace (space or tabs) into single space, turn
#  spaces into newlines, and remove empty lines.

get_dependents()
{
	sed -e 's/^[^:]*:[ 	]*//' \
		    -e 's/^[ 	]*//g' \
		    -e 's/[ 	]\+/ /g' \
		    -e 's/\\$//' |
		tr ' ' '\012' |
		egrep -v '^$'
}

parallel()
{
	INTER=''
	if [ $# -eq 2 ] ; then
		INTER="$1"
		shift
	fi
	if [ $# -ne 1 ] ; then
		echo "$CMD: parallel() used incorrectly" 1>&2
		exit 1
	fi
	PROG="$1"
	NCPU=$(nproc)
	N=0
	RC=0
	STEP=1

	while read arg ; do
		if [ $N -lt $NCPU ] ; then
			$PROG $arg &
			N=$[ N + 1 ]
		fi
		if [ $N -eq $NCPU ] ; then
			if wait -n ; then
				:
			else
				if [ $RC -ne 0 ] ; then
					RC=1
				fi
			fi
			N=$[ N - 1 ]
			STEP=$[ $STEP + 1 ]
		fi
		if [ ! -z "$INTER" -a $[ STEP % 50 ] -eq 0 ] ; then
			echo "$STEP of $INTER done ..."
		fi
	done
	if wait ; then
		:
	else
		if [ $RC -ne 0 ] ; then
			RC=1
		fi
	fi
	return $RC
}
