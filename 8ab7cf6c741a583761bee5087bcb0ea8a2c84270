{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2f5bb0e9_51eaf8f7",
        "filename": "kleaf/common.bazelrc",
        "patchSetId": 5
      },
      "lineNbr": 60,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-12-05T23:29:26Z",
      "side": 1,
      "message": "I wonder how roboleaf does the distinction between host and target binaries.",
      "revId": "8ab7cf6c741a583761bee5087bcb0ea8a2c84270",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47d9abe1_8668e02f",
        "filename": "kleaf/common.bazelrc",
        "patchSetId": 5
      },
      "lineNbr": 60,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-12-06T04:23:22Z",
      "side": 1,
      "message": "I\u0027ll send an email. From the research I understand, Bazel CANNOT build two things that belongs to two different \"platforms\" in one command:\n\nhttps://bazel.build/concepts/platforms",
      "parentUuid": "2f5bb0e9_51eaf8f7",
      "revId": "8ab7cf6c741a583761bee5087bcb0ea8a2c84270",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87b66ba9_3de391bb",
        "filename": "kleaf/common.bazelrc",
        "patchSetId": 5
      },
      "lineNbr": 60,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-12-06T05:32:57Z",
      "side": 1,
      "message": "See email.\n\nAs long as we aren\u0027t building multiple things for multiple platforms, it can build successfully (and I\u0027ve checked that it is selecting the correct toolchain). See build commands in the commit message.\n\nBut I haven\u0027t figure out how to build everything in `//build/kernel/kleaf/tests/cc_testing` simultaneously yet.",
      "parentUuid": "47d9abe1_8668e02f",
      "revId": "8ab7cf6c741a583761bee5087bcb0ea8a2c84270",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d9afbc4_9935f2a4",
        "filename": "kleaf/impl/BUILD.bazel",
        "patchSetId": 5
      },
      "lineNbr": 156,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-12-05T23:29:26Z",
      "side": 1,
      "message": "the fact that this defines a version and a host architecture reveals that the toolchain definition should rather be located at //prebuilts/clang/host/",
      "range": {
        "startLine": 156,
        "startChar": 0,
        "endLine": 156,
        "endChar": 66
      },
      "revId": "8ab7cf6c741a583761bee5087bcb0ea8a2c84270",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ddaaaf0_b806bbe2",
        "filename": "kleaf/impl/BUILD.bazel",
        "patchSetId": 5
      },
      "lineNbr": 156,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-12-06T04:22:19Z",
      "side": 1,
      "message": "Unfortunately, Roboleaf takes over `//prebuilts/clang/host/linux-x86/` and now the package requires `@soong_injection`, which is another topic to discuss.",
      "parentUuid": "9d9afbc4_9935f2a4",
      "range": {
        "startLine": 156,
        "startChar": 0,
        "endLine": 156,
        "endChar": 66
      },
      "revId": "8ab7cf6c741a583761bee5087bcb0ea8a2c84270",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "db489f2e_9e21bb27",
        "filename": "kleaf/impl/BUILD.bazel",
        "patchSetId": 5
      },
      "lineNbr": 156,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-02-10T21:11:22Z",
      "side": 1,
      "message": "Discussed offline in the internal doc titled \"Kleaf Hermetic CC toolchain\" -- we simply can\u0027t do this without conflicts with Roboleaf\u0027s definition.",
      "parentUuid": "4ddaaaf0_b806bbe2",
      "range": {
        "startLine": 156,
        "startChar": 0,
        "endLine": 156,
        "endChar": 66
      },
      "revId": "8ab7cf6c741a583761bee5087bcb0ea8a2c84270",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3731d91_e000b57b",
        "filename": "kleaf/impl/cc_toolchain_config.bzl",
        "patchSetId": 5
      },
      "lineNbr": 5,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-12-05T23:29:26Z",
      "side": 1,
      "message": "get rid of _setup_env.sh completely and define those in bzl. :-)\n\nAlso, newer kernels (the ones that we care about in this code line), have a LLVM\u003d1 flag to define all this properly in the kernel.",
      "range": {
        "startLine": 5,
        "startChar": 0,
        "endLine": 5,
        "endChar": 49
      },
      "revId": "8ab7cf6c741a583761bee5087bcb0ea8a2c84270",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c1a98fe_2ebee234",
        "filename": "kleaf/impl/cc_toolchain_config.bzl",
        "patchSetId": 5
      },
      "lineNbr": 5,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-12-06T05:32:57Z",
      "side": 1,
      "message": "See the CL above this. My other idea is to have bazel.py execute _setup_hermetic_toolchain.sh to generate these variables to a .bzl file, but yeah I agree that your option seems better (and I should have kernel_env depend on this).\n\nBut let me get this working then think of deduplication later.",
      "parentUuid": "f3731d91_e000b57b",
      "range": {
        "startLine": 5,
        "startChar": 0,
        "endLine": 5,
        "endChar": 49
      },
      "revId": "8ab7cf6c741a583761bee5087bcb0ea8a2c84270",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b90222e_20e24525",
        "filename": "kleaf/impl/cc_toolchain_config.bzl",
        "patchSetId": 5
      },
      "lineNbr": 34,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-12-05T23:29:26Z",
      "side": 1,
      "message": "why not ld-lld as usual?",
      "revId": "8ab7cf6c741a583761bee5087bcb0ea8a2c84270",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b54f6d7f_b33fa704",
        "filename": "kleaf/impl/cc_toolchain_config.bzl",
        "patchSetId": 5
      },
      "lineNbr": 34,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-12-06T04:22:19Z",
      "side": 1,
      "message": "These are fake values; I need to get clang working first, then think about linking etc.",
      "parentUuid": "9b90222e_20e24525",
      "revId": "8ab7cf6c741a583761bee5087bcb0ea8a2c84270",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a53b2e9c_d4247165",
        "filename": "kleaf/impl/cc_toolchain_config.bzl",
        "patchSetId": 5
      },
      "lineNbr": 41,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-12-05T23:29:26Z",
      "side": 1,
      "message": "llvm-ar?",
      "revId": "8ab7cf6c741a583761bee5087bcb0ea8a2c84270",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "848ad2f0_3a3e9d23",
        "filename": "kleaf/impl/cc_toolchain_config.bzl",
        "patchSetId": 5
      },
      "lineNbr": 41,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-12-06T05:46:03Z",
      "side": 1,
      "message": "you mean L38? yes. I just need clang for this proof-of-concept,  and I\u0027ll resolve the other binaries in upcoming patchsets.",
      "parentUuid": "a53b2e9c_d4247165",
      "revId": "8ab7cf6c741a583761bee5087bcb0ea8a2c84270",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}