{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e42f01d1_2be3558c",
        "filename": "kleaf/impl/kernel_build.bzl",
        "patchSetId": 1
      },
      "lineNbr": 470,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-03-03T22:46:04Z",
      "side": 1,
      "message": "the kernel/build project should never refer to //common, except in very rare cases (which I am also trying to clean up. I think the clang toolchain version is the only one left). This is because:\n\n- partners are likely to check out //common in various different directories. They might forgot that they need to customize these two attributes. Hence, rather we should have a loud failure to force people to specify it.\n\n- We need to cut the dependencies from //build/kernel to //common; //build/kernel needs to be standalone because in the case of DDK, or building modules without sources, there\u0027s no //common at all. Think //build/kernel as a toolchain package; the toolchain package should not depend on sources. It is the other way around.",
      "range": {
        "startLine": 470,
        "startChar": 92,
        "endLine": 470,
        "endChar": 100
      },
      "revId": "57a5aded35721a5bb357d60b2e2ee614b040ada5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90839c05_ebee7fdc",
        "filename": "kleaf/impl/kernel_build.bzl",
        "patchSetId": 1
      },
      "lineNbr": 470,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-03-03T22:49:33Z",
      "side": 1,
      "message": "If you want to force people to specify this, just `fail()` (inside rule implementations not macros, so it doesn\u0027t break `bazel build :all --nobuild`).\n\nAlso, even in the case of clang toolchain version, //build/kernel doesn\u0027t depend on //common directly, but rather via the `key_value_repo` rule. The customization of \"where to find the ACK source\" stays in the workspace file.",
      "parentUuid": "e42f01d1_2be3558c",
      "range": {
        "startLine": 470,
        "startChar": 92,
        "endLine": 470,
        "endChar": 100
      },
      "revId": "57a5aded35721a5bb357d60b2e2ee614b040ada5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5e810b1_bebb2cab",
        "filename": "kleaf/impl/kernel_build.bzl",
        "patchSetId": 1
      },
      "lineNbr": 470,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-03-03T22:49:33Z",
      "side": 1,
      "message": "If you want to force people to specify this, just `fail()` directly if it is a `None` (preferably inside rules so it avoids breaking `bazel build :all`.",
      "parentUuid": "e42f01d1_2be3558c",
      "range": {
        "startLine": 470,
        "startChar": 92,
        "endLine": 470,
        "endChar": 100
      },
      "revId": "57a5aded35721a5bb357d60b2e2ee614b040ada5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58f78c4b_f659ab0d",
        "filename": "kleaf/impl/kernel_build.bzl",
        "patchSetId": 1
      },
      "lineNbr": 470,
      "author": {
        "id": 1889091
      },
      "writtenOn": "2023-03-04T04:14:33Z",
      "side": 1,
      "message": "Thanks Yifan; Yes, it makes sense. Converting this CL into Arg documentation I missed earlier; will do another CL for the forcing the value next week.",
      "parentUuid": "f5e810b1_bebb2cab",
      "range": {
        "startLine": 470,
        "startChar": 92,
        "endLine": 470,
        "endChar": 100
      },
      "revId": "57a5aded35721a5bb357d60b2e2ee614b040ada5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}