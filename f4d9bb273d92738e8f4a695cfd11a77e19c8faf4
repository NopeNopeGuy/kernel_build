{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "208fad06_bc638b38",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1569742
      },
      "writtenOn": "2022-05-06T15:39:37Z",
      "side": 1,
      "message": "This check looks like a desirable thing to have to ensure the list of protected symbols and \u0027vendor\u0027 symbols are exclusive, so thanks for that. But this still doesn\u0027t help with the case where a vendor module gets out of sync with the symbol list and starts using a protected symbol. At that point the vendor will get no build error and they won\u0027t know their symbol list is out of date. So they\u0027ll have to try and load the module, fail, and realise that things have gotten out of sync, which is what the build time check should try to prevent.\n\nSuggested alternative: iterate over the vendor modules (which is the set of all modules minus the GKI modules), and for each, make sure that the undefined symbols are not protected.",
      "revId": "f4d9bb273d92738e8f4a695cfd11a77e19c8faf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f00538c_870f40e5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1889091
      },
      "writtenOn": "2022-05-06T16:27:10Z",
      "side": 1,
      "message": "Thanks Quentin for providing feedback on this.\n\nI understood the alternative you mentioned last time; but I believe that will not be fool proof as well. For example,\n\n1. GKI module A.ko (unprotected) so vendor can override it if they desire so.\n2. Vendor module A.ko (modified open source version - same name) accesses the protected symbol.\n3. We don\u0027t catch it as A.ko will get filtered out as it\u0027s a GKI module as well.\n\nWe don\u0027t want any vendor to start using protected symbol without our notice; so once we have anything in protected list; they will not be able to use it unless they first ask us to whitelist it (making module unprotected and removing the symbol). This will make sure we have build time check as well as runtime check and we don\u0027t have to actively police what is in the vendor symbol lists (less review burden for vendor patches), and we only maintain protected list.\n\nI chose this simple exclusivity check as it\u0027s quick and simple and add values on top of the runtime check; otherwise we need to rely on the runtime check and most failures will be found in the dev with loading; so that should be fine.\n\nLet me know, what do you think?",
      "parentUuid": "208fad06_bc638b38",
      "revId": "f4d9bb273d92738e8f4a695cfd11a77e19c8faf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "678a6bff_a283f01b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1569742
      },
      "writtenOn": "2022-05-06T16:36:46Z",
      "side": 1,
      "message": "This tells me that GKI module A.ko should not be listed as a GKI module at all if we allow overriding? That is, an unprotected GKI module is nothing more than a normal kernel module that partners can mess with like normal?",
      "parentUuid": "9f00538c_870f40e5",
      "revId": "f4d9bb273d92738e8f4a695cfd11a77e19c8faf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02213245_6f89b11d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1889091
      },
      "writtenOn": "2022-05-06T16:41:35Z",
      "side": 1,
      "message": "We may need to make module unprotected just for a vendor; but all other still want to use open source version and they don\u0027t have to carry extra module in vendor module because of another vendor. So, we still need to keep the unprotected module as part of the GKI module. This will also encourage the use of maximum open source code vs custom code.",
      "parentUuid": "678a6bff_a283f01b",
      "revId": "f4d9bb273d92738e8f4a695cfd11a77e19c8faf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6690ea81_316e4c4d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1569742
      },
      "writtenOn": "2022-05-09T10:00:36Z",
      "side": 1,
      "message": "Right, we can keep compiling the \u0027unprotected\u0027 module if some vendors want to keep using our pre-built, no problem, but why should we keep it on the list of GKI modules? This makes things extra complicated no? Clearly this causes issues like the one you\u0027ve mentioned above, and it feels like we\u0027re mixing concepts a bit. IOW, can we simplify this a bit please :) ?",
      "parentUuid": "02213245_6f89b11d",
      "revId": "f4d9bb273d92738e8f4a695cfd11a77e19c8faf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82dea59c_99a33e5c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1889091
      },
      "writtenOn": "2022-05-09T15:50:09Z",
      "side": 1,
      "message": "They are still GKI modules but unprotected; so should be on the list of GKI modules. ðŸ˜Š\nThe reason is without being on the list; they won\u0027t be copied as part of the system_dlkm archive and hence partition. The blind copy to the archive can cause the issue with device build as there may be vendor modules; so just copying all *.ko is not an option.",
      "parentUuid": "6690ea81_316e4c4d",
      "revId": "f4d9bb273d92738e8f4a695cfd11a77e19c8faf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39c80ce1_b700a9f7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1569742
      },
      "writtenOn": "2022-05-09T16:16:57Z",
      "side": 1,
      "message": "Presumably this can be solved trivially by having a separate list for those modules? I really think it is worthwhile to separate them as they have entirely different semantics, which will make things much easier to reason about IMO.",
      "parentUuid": "82dea59c_99a33e5c",
      "revId": "f4d9bb273d92738e8f4a695cfd11a77e19c8faf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7842763a_8ef1ded0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1889091
      },
      "writtenOn": "2022-05-09T16:40:09Z",
      "side": 1,
      "message": "Thanks.\n\nYou definitely have many good design ideas around these but unfortunately it\u0027s little too late at this point of time; since 5.10 is already frozen I don\u0027t think I can do big design changes. I am still trying to have some modules for 5.15 go in but at this speed looks like I will miss that train as well. Let me see, if I can still do these changes for both 5.10 and 5.15. Tooling changes are OK because both repos are using master from kernel build tools; but changing lists and what it means, I am not sure - I need to assess.",
      "parentUuid": "39c80ce1_b700a9f7",
      "revId": "f4d9bb273d92738e8f4a695cfd11a77e19c8faf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d1a6bf2_493e1473",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-05-10T12:38:53Z",
      "side": 1,
      "message": "Just for the record, we should rather not settle with an inferior solution just because we ran out of time ...",
      "parentUuid": "7842763a_8ef1ded0",
      "revId": "f4d9bb273d92738e8f4a695cfd11a77e19c8faf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a074b19_2a2fc7fa",
        "filename": "abi/check_protected_symbol_access",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-05-10T12:38:53Z",
      "side": 1,
      "message": "what if said file does not exist?",
      "revId": "f4d9bb273d92738e8f4a695cfd11a77e19c8faf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d57d0ba_61364d79",
        "filename": "abi/check_protected_symbol_access",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-05-10T12:38:53Z",
      "side": 1,
      "message": "what do we expect the first line of this file to be? if it is commentary, what if there are more lines?",
      "range": {
        "startLine": 20,
        "startChar": 5,
        "endLine": 20,
        "endChar": 7
      },
      "revId": "f4d9bb273d92738e8f4a695cfd11a77e19c8faf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19c6ebfb_cd566f20",
        "filename": "abi/check_protected_symbol_access",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-05-10T12:38:53Z",
      "side": 1,
      "message": "this is a hardcoded convention. At least define elsewhere as a constant.",
      "range": {
        "startLine": 20,
        "startChar": 44,
        "endLine": 20,
        "endChar": 69
      },
      "revId": "f4d9bb273d92738e8f4a695cfd11a77e19c8faf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7fb51d4_90726869",
        "filename": "abi/check_protected_symbol_access",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1889091
      },
      "writtenOn": "2022-05-10T18:15:36Z",
      "side": 1,
      "message": "`[abi_symbol_list]`\n\nI am planning to come up with a script to generate this file; so unless someone modifies it manually it should be an issue. I\u0027ll put a note on the script usage document to not edit file manually. Does that work?",
      "parentUuid": "0d57d0ba_61364d79",
      "range": {
        "startLine": 20,
        "startChar": 5,
        "endLine": 20,
        "endChar": 7
      },
      "revId": "f4d9bb273d92738e8f4a695cfd11a77e19c8faf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2716df2_3b3e046b",
        "filename": "abi/check_protected_symbol_access",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1889091
      },
      "writtenOn": "2022-05-10T18:15:36Z",
      "side": 1,
      "message": "`awk` loads the first file in the memory and compare against the second. So, if either file is empty there won\u0027t be any match which is correct behavior. Though we expect the file to be present and non empty but possible that someone might have deleted it - I need to handle the existence case. I\u0027ll add that one.",
      "parentUuid": "7a074b19_2a2fc7fa",
      "revId": "f4d9bb273d92738e8f4a695cfd11a77e19c8faf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "648358ac_43c5c073",
        "filename": "abi/check_protected_symbol_access",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1889091
      },
      "writtenOn": "2022-05-10T18:15:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "19c6ebfb_cd566f20",
      "range": {
        "startLine": 20,
        "startChar": 44,
        "endLine": 20,
        "endChar": 69
      },
      "revId": "f4d9bb273d92738e8f4a695cfd11a77e19c8faf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f4cdcb2_e6a82e7d",
        "filename": "abi/check_protected_symbol_access",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-05-10T12:38:53Z",
      "side": 1,
      "message": "those files contain comments, section tags and most symbols are prefixed by an arbitrary number of whitespaces. is this all taken into account?",
      "range": {
        "startLine": 21,
        "startChar": 39,
        "endLine": 21,
        "endChar": 55
      },
      "revId": "f4d9bb273d92738e8f4a695cfd11a77e19c8faf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a5c7695_5f045f0b",
        "filename": "abi/check_protected_symbol_access",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1889091
      },
      "writtenOn": "2022-05-10T18:15:36Z",
      "side": 1,
      "message": "Logic is to have the protected symbol file in the memory and compare against; so as long as protected symbol file is clean with unnecessary commentary (which it should be as it will be script generated file) it\u0027s fine. Spaces are no issue in the comparison. I believe I have tested it but I\u0027ll double check again and as long as comments doesn\u0027t match in both files they won\u0027t be part of the `$violation`.",
      "parentUuid": "2f4cdcb2_e6a82e7d",
      "range": {
        "startLine": 21,
        "startChar": 39,
        "endLine": 21,
        "endChar": 55
      },
      "revId": "f4d9bb273d92738e8f4a695cfd11a77e19c8faf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da24cbef_27df307e",
        "filename": "abi/check_protected_symbol_access",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-05-10T12:38:53Z",
      "side": 1,
      "message": "that is one line, and perhaps you can make this an exit TRAP",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 32,
        "endChar": 18
      },
      "revId": "f4d9bb273d92738e8f4a695cfd11a77e19c8faf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64b0db5a_0a6e16ed",
        "filename": "abi/check_protected_symbol_access",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1889091
      },
      "writtenOn": "2022-05-10T18:15:36Z",
      "side": 1,
      "message": "`trap \"rm -f $protected_symbols \u0026\u0026 rm -f $vendor_symbols\" EXIT` ?",
      "parentUuid": "da24cbef_27df307e",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 32,
        "endChar": 18
      },
      "revId": "f4d9bb273d92738e8f4a695cfd11a77e19c8faf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e001132f_3cc413c0",
        "filename": "build.sh",
        "patchSetId": 1
      },
      "lineNbr": 760,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-05-10T12:38:53Z",
      "side": 1,
      "message": "why -x?",
      "revId": "f4d9bb273d92738e8f4a695cfd11a77e19c8faf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b166a9a3_fcff048f",
        "filename": "build.sh",
        "patchSetId": 1
      },
      "lineNbr": 760,
      "author": {
        "id": 1889091
      },
      "writtenOn": "2022-05-10T18:15:36Z",
      "side": 1,
      "message": "Can you please provide more details on what\u0027s wrong here? Isn\u0027t every commands in this script wrapped around with `set -x` and `set +x`. I just followed the existing format within the script.",
      "parentUuid": "e001132f_3cc413c0",
      "revId": "f4d9bb273d92738e8f4a695cfd11a77e19c8faf4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}