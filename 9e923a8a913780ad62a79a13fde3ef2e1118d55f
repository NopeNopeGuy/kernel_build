{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5c5179b9_cafef2cd",
        "filename": "kleaf/bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 77,
      "author": {
        "id": 1961395
      },
      "writtenOn": "2024-05-01T10:47:25Z",
      "side": 1,
      "message": "was this intentionally left?",
      "range": {
        "startLine": 77,
        "startChar": 8,
        "endLine": 77,
        "endChar": 21
      },
      "revId": "9e923a8a913780ad62a79a13fde3ef2e1118d55f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "887d2c56_0e174989",
        "filename": "kleaf/bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 77,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2024-05-01T15:06:03Z",
      "side": 1,
      "message": "I think so, but it could deserve mention in the docstring.",
      "parentUuid": "5c5179b9_cafef2cd",
      "range": {
        "startLine": 77,
        "startChar": 8,
        "endLine": 77,
        "endChar": 21
      },
      "revId": "9e923a8a913780ad62a79a13fde3ef2e1118d55f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16f867cc_538f9777",
        "filename": "kleaf/bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 106,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2024-05-01T22:47:47Z",
      "side": 1,
      "message": "that is `textwrap.shorten(string, char_max, placeholder\u003d\"...\")`\n\nhttps://docs.python.org/3.12/library/textwrap.html#textwrap.shorten",
      "range": {
        "startLine": 106,
        "startChar": 4,
        "endLine": 106,
        "endChar": 19
      },
      "fixSuggestions": [
        {
          "fixId": "7af67913_7fab1b01",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "kleaf/bazel.py",
              "range": {
                "startLine": 106,
                "startChar": 0,
                "endLine": 113,
                "endChar": 0
              },
              "replacement": ""
            },
            {
              "path": "kleaf/bazel.py",
              "range": {
                "startLine": 701,
                "startChar": 0,
                "endLine": 702,
                "endChar": 0
              },
              "replacement": "                {textwrap.shorten(first_unexpected_line, 73, placeholder\u003d\"...\")}\"\"\"))\n"
            }
          ]
        }
      ],
      "revId": "9e923a8a913780ad62a79a13fde3ef2e1118d55f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "651378d1_027b0369",
        "filename": "kleaf/bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 678,
      "author": {
        "id": 1961395
      },
      "writtenOn": "2024-05-01T10:47:25Z",
      "side": 1,
      "message": "nit: How does interact with the `--make_keep_going` flag? will this suppress all the errors and leave just one?",
      "range": {
        "startLine": 678,
        "startChar": 4,
        "endLine": 678,
        "endChar": 25
      },
      "revId": "9e923a8a913780ad62a79a13fde3ef2e1118d55f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e0be415_244a4ec2",
        "filename": "kleaf/bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 678,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2024-05-01T15:06:03Z",
      "side": 1,
      "message": "I think I would like to see more clarification on the error case. If there are errors or any other reason the build will fail (rc!\u003d0), we should not do this check at all.",
      "parentUuid": "651378d1_027b0369",
      "range": {
        "startLine": 678,
        "startChar": 4,
        "endLine": 678,
        "endChar": 25
      },
      "revId": "9e923a8a913780ad62a79a13fde3ef2e1118d55f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40ece1e7_7009efa0",
        "filename": "kleaf/bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 678,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2024-05-01T17:05:08Z",
      "side": 1,
      "message": "To Ulises question: No. All errors / warnings will still be printed, regardless of the --make_keep_going flag. This is only the first encountered unexpected line re-printed at the end of the execution. All lines, expected or not, are printed (L693).\n\nI\u0027ll address Matthias\u0027s suggestion and add a test case for this in a follow up change. I\u0027ll do this by dropping all UnexpectedOutputLinesException from the list if BazelSubprocessException is seen.",
      "parentUuid": "3e0be415_244a4ec2",
      "range": {
        "startLine": 678,
        "startChar": 4,
        "endLine": 678,
        "endChar": 25
      },
      "revId": "9e923a8a913780ad62a79a13fde3ef2e1118d55f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c82f1b41_4b595d72",
        "filename": "kleaf/bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 678,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2024-05-01T22:47:47Z",
      "side": 1,
      "message": "Acknowledged, but perhaps also add something to the commit message.",
      "parentUuid": "40ece1e7_7009efa0",
      "range": {
        "startLine": 678,
        "startChar": 4,
        "endLine": 678,
        "endChar": 25
      },
      "revId": "9e923a8a913780ad62a79a13fde3ef2e1118d55f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48614ae0_08bf738f",
        "filename": "kleaf/bazel.py",
        "patchSetId": 12
      },
      "lineNbr": 699,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2024-05-01T22:47:47Z",
      "side": 1,
      "message": "Perhaps the error should also contain a hint where to find the allow-list file. Otherwise legitimate additions to the output might upset users that have no clue where to search for it.\n\n(kudos to the AI suggestion)",
      "fixSuggestions": [
        {
          "fixId": "9fc098c1_5238481d",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "kleaf/bazel.py",
              "range": {
                "startLine": 701,
                "startChar": 0,
                "endLine": 702,
                "endChar": 0
              },
              "replacement": "                {_shorten_string(first_unexpected_line, 73)}\n\n            If you believe this is a legitimate output, add it to the allowlist:\n                {self.known_startup_options.stdout_stderr_regex_allowlist}\"\"\"))\n"
            }
          ]
        }
      ],
      "revId": "9e923a8a913780ad62a79a13fde3ef2e1118d55f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}