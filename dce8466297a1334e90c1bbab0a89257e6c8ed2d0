{
  "comments": [
    {
      "key": {
        "uuid": "b1884bc1_2b9bd753",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2020-07-13T19:40:16Z",
      "side": 1,
      "message": "While I like the approach of the patch, I wonder whether checking the built modules against a given list is necessary a GKI only feature. It could be also useful downstream in vendor builds to ensure no new modules are sneaking in (even unintentionally by an upstream merge). So, I would rather think of this feature as \"check the built modules against a given list of allowed modules\". This allow-list, we coincidentally can take to enable more features in extract_symbols etc.\n\nSo, I think this can be a bit more generic. Maybe instead of IS_GKI_BUILD, define STRICT_MODULE_LIST\u003dpath/to/some/allowlist\n\nAlso, do not assume, vendor builds are not including the gki build.config :-) TIL!",
      "revId": "dce8466297a1334e90c1bbab0a89257e6c8ed2d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4849de12_93af5ede",
        "filename": "build.sh",
        "patchSetId": 1
      },
      "lineNbr": 504,
      "author": {
        "id": 1150933
      },
      "writtenOn": "2020-07-13T18:03:43Z",
      "side": 1,
      "message": "Can\u0027t we do\n\nif ! diff -u \"${GKI_MODULES_ORDER}\" \"${OUT_DIR}/modules.order\"; then\n\nand avoid the set +e/set -e pair?",
      "revId": "dce8466297a1334e90c1bbab0a89257e6c8ed2d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11e6db46_1a32cd8a",
        "filename": "build.sh",
        "patchSetId": 1
      },
      "lineNbr": 504,
      "author": {
        "id": 1569742
      },
      "writtenOn": "2020-07-14T08:17:44Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4849de12_93af5ede",
      "revId": "dce8466297a1334e90c1bbab0a89257e6c8ed2d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d95f0602_a5f614e9",
        "filename": "build.sh",
        "patchSetId": 1
      },
      "lineNbr": 505,
      "author": {
        "id": 1150933
      },
      "writtenOn": "2020-07-13T18:03:43Z",
      "side": 1,
      "message": "On line 500, you use double [[ ]]. Consider using either [ or [[ for consistency.",
      "range": {
        "startLine": 505,
        "startChar": 5,
        "endLine": 505,
        "endChar": 6
      },
      "revId": "dce8466297a1334e90c1bbab0a89257e6c8ed2d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93f4c7d1_0b31c8be",
        "filename": "build.sh",
        "patchSetId": 1
      },
      "lineNbr": 505,
      "author": {
        "id": 1569742
      },
      "writtenOn": "2020-07-14T08:17:44Z",
      "side": 1,
      "message": "Good point, I\u0027ll stick to [] throughout.",
      "parentUuid": "d95f0602_a5f614e9",
      "range": {
        "startLine": 505,
        "startChar": 5,
        "endLine": 505,
        "endChar": 6
      },
      "revId": "dce8466297a1334e90c1bbab0a89257e6c8ed2d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19610a9f_afef4f41",
        "filename": "build.sh",
        "patchSetId": 1
      },
      "lineNbr": 717,
      "author": {
        "id": 1150933
      },
      "writtenOn": "2020-07-13T18:03:43Z",
      "side": 1,
      "message": "On line 500, you use double [[ ]]. Consider using either [ or [[ for consistency.",
      "range": {
        "startLine": 717,
        "startChar": 3,
        "endLine": 717,
        "endChar": 4
      },
      "revId": "dce8466297a1334e90c1bbab0a89257e6c8ed2d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3659b2f1_ead1bb7f",
        "filename": "build.sh",
        "patchSetId": 1
      },
      "lineNbr": 717,
      "author": {
        "id": 1569742
      },
      "writtenOn": "2020-07-14T08:17:44Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "19610a9f_afef4f41",
      "range": {
        "startLine": 717,
        "startChar": 3,
        "endLine": 717,
        "endChar": 4
      },
      "revId": "dce8466297a1334e90c1bbab0a89257e6c8ed2d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3785677_34948e71",
        "filename": "build.sh",
        "patchSetId": 1
      },
      "lineNbr": 718,
      "author": {
        "id": 1150933
      },
      "writtenOn": "2020-07-13T18:03:43Z",
      "side": 1,
      "message": "This looks like a neat trick, but I find it a bit unusual. How about this alternative approach:\n\nwhile read p; do echo $(basename \"${p}\") ; done \u003c \"${GKI_MODULES_ORDER}\" \u003e \"${DIST_DIR}/gki_modules.list\"",
      "revId": "dce8466297a1334e90c1bbab0a89257e6c8ed2d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69b1cc31_894d423e",
        "filename": "build.sh",
        "patchSetId": 1
      },
      "lineNbr": 718,
      "author": {
        "id": 1569742
      },
      "writtenOn": "2020-07-14T08:17:44Z",
      "side": 1,
      "message": "oh, I liked this one ðŸ˜Š\nbut sure, that works for me",
      "parentUuid": "b3785677_34948e71",
      "revId": "dce8466297a1334e90c1bbab0a89257e6c8ed2d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}