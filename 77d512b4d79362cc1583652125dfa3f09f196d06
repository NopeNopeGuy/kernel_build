{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b2e2c2cf_dc6f9d0b",
        "filename": "kleaf/impl/abi/abi_dump.bzl",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2023-11-28T13:36:35Z",
      "side": 1,
      "message": "Not sure that is the best location to define this expression. Perhaps something that is attached to the `kernel_build` rule is more suitable. Cc: @elsk@google.com @umendez@google.com",
      "revId": "77d512b4d79362cc1583652125dfa3f09f196d06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95ee5ecf_9cee8e86",
        "filename": "kleaf/impl/abi/abi_dump.bzl",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 1137063
      },
      "writtenOn": "2023-11-28T18:00:55Z",
      "side": 1,
      "message": "Wouldn\u0027t it make more sense to exclude headers that are outside `include/`?  Depending on `private` being in the filename is fragile.  There are lots of private headers that do not have `private` in their filename.",
      "range": {
        "startLine": 92,
        "startChar": 29,
        "endLine": 92,
        "endChar": 62
      },
      "revId": "77d512b4d79362cc1583652125dfa3f09f196d06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5bcefc9d_84c28fc1",
        "filename": "kleaf/impl/abi/abi_dump.bzl",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 1069543
      },
      "writtenOn": "2023-11-28T18:35:07Z",
      "side": 1,
      "message": "Only allowing files under `include/` won\u0027t work since we need to support vendor hooks which might require some internal types. I agree that looking for `priv` in the filename is not sufficient to find/exclude private types. I\u0027m also nervous about the opposite case - silently excluding private types that are needed to implement a vh.\n\nCould the tool create a warning in gerrit that `type xxx` will not be maintained as stable so this kind of exclusion is at least made visible. Could we have a mechanism to override? I assume that these private headers will not be available for DDK builds, correct?\n\nIf this is possible, then we could:\n1. by default exclude types not under `include/`\n2. If another type is found, throw a warning listing the types that won\u0027t be KMI\n3. Allow that type to be explicitly added to the KMI (file with list of types? better ideas?)",
      "parentUuid": "95ee5ecf_9cee8e86",
      "range": {
        "startLine": 92,
        "startChar": 29,
        "endLine": 92,
        "endChar": 62
      },
      "revId": "77d512b4d79362cc1583652125dfa3f09f196d06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8a0a7bd_5d8ab499",
        "filename": "kleaf/impl/abi/abi_dump.bzl",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-11-28T19:04:26Z",
      "side": 1,
      "message": "+1.\n\nIn particular, for partners who wants to do ABI monitoring on their own, should this be a configurable attribute for them?\n\nAdding the expression here (same goes to *.h) means it will be applied to everyone using this rule, which may include partners who wants to do out-of-tree ABI monitoring on their own.\n\nMy suggestion:\n\n- Add a `stg_file_pattern` attribute to kernel_abi()\n- Set it to `*.h \u0026 !(*[/_-]private.h | *[/_-]priv.h)` just for GKI\n- If the attribute is empty, do not add the `--files` flag. Otherwise, add the `--files` flag with the given string. (Don\u0027t forget to `shell.quote()` it before feeding it to the shell command!)",
      "parentUuid": "b2e2c2cf_dc6f9d0b",
      "revId": "77d512b4d79362cc1583652125dfa3f09f196d06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25035f86_dae335ae",
        "filename": "kleaf/impl/abi/abi_dump.bzl",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 1625880
      },
      "writtenOn": "2023-11-28T19:37:45Z",
      "side": 1,
      "message": "I\u0027ve followed up on the bug.",
      "parentUuid": "5bcefc9d_84c28fc1",
      "range": {
        "startLine": 92,
        "startChar": 29,
        "endLine": 92,
        "endChar": 62
      },
      "revId": "77d512b4d79362cc1583652125dfa3f09f196d06",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}