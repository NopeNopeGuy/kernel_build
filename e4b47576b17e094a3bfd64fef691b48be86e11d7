{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1fabfba8_5b1e7d29",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-11-30T22:40:59Z",
      "side": 1,
      "message": "The bazel bits LGTM overall. I have some questions on the Kbuild bits.",
      "revId": "e4b47576b17e094a3bfd64fef691b48be86e11d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57be284c_cf54f7d8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-11-30T22:41:48Z",
      "side": 1,
      "message": "also please add some unit test for the new rule",
      "revId": "e4b47576b17e094a3bfd64fef691b48be86e11d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e8b591a_0fa63914",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1965070
      },
      "writtenOn": "2023-11-30T23:08:37Z",
      "side": 1,
      "message": "Missed this - will add.",
      "parentUuid": "57be284c_cf54f7d8",
      "revId": "e4b47576b17e094a3bfd64fef691b48be86e11d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a479f4f3_cf8deaff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-11-30T23:42:32Z",
      "side": 1,
      "message": "As said in another comment:\n\n- If adding a unit test -\u003e build/kernel/kleaf/tests\n- If adding an \"integration\" test that depends on `//common:kernel_aarch64` -\u003e //common:kernel_aarch64_additional_tests",
      "parentUuid": "5e8b591a_0fa63914",
      "revId": "e4b47576b17e094a3bfd64fef691b48be86e11d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb81bb04_42848719",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1965070
      },
      "writtenOn": "2024-01-11T00:49:07Z",
      "side": 1,
      "message": "I don\u0027t know if I did the test piece correctly. I didn\u0027t have a ton of time to fully grok it... so please feel free to criticize!",
      "parentUuid": "a479f4f3_cf8deaff",
      "revId": "e4b47576b17e094a3bfd64fef691b48be86e11d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3240cad8_d85c82c9",
        "filename": "kleaf/impl/ddk/ddk_uapi_headers.bzl",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-11-30T22:40:10Z",
      "side": 1,
      "message": "Can you explain why we need a warning here? Is it not valid to have an empty archive?",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 34,
        "endChar": 67
      },
      "revId": "e4b47576b17e094a3bfd64fef691b48be86e11d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a575d356_b5813cc1",
        "filename": "kleaf/impl/ddk/ddk_uapi_headers.bzl",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1965070
      },
      "writtenOn": "2023-11-30T23:07:42Z",
      "side": 1,
      "message": "No, it\u0027s not invalid. I just figured it\u0027s more likely that the user accidentally didn\u0027t glob any sources than it is they intentionally want an empty archive. I can remove if you like.",
      "parentUuid": "3240cad8_d85c82c9",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 34,
        "endChar": 67
      },
      "revId": "e4b47576b17e094a3bfd64fef691b48be86e11d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f384514_57cac2a9",
        "filename": "kleaf/impl/ddk/ddk_uapi_headers.bzl",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-11-30T23:17:27Z",
      "side": 1,
      "message": "if glob() returns empty result, it will fail, unless `allow_empty\u003dTrue` (which states the user intention).\n\nPlease remove this (IMO)",
      "parentUuid": "a575d356_b5813cc1",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 34,
        "endChar": 67
      },
      "revId": "e4b47576b17e094a3bfd64fef691b48be86e11d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa9a9862_93ca4aa0",
        "filename": "kleaf/impl/ddk/ddk_uapi_headers.bzl",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1965070
      },
      "writtenOn": "2023-11-30T23:26:05Z",
      "side": 1,
      "message": "Hmm, that doesn\u0027t seem to be the case from my testing. I can trigger this print by passing a glob which doesn\u0027t match anything to `srcs`. Does `allow_files` imply `allow_empty\u003dTrue` somehow? If I add `allow_empty\u003dFalse` directly, I trigger this instead:\n\n```\nERROR: in srcs attribute of ddk_uapi_headers rule $rule: attribute must be non empty\n```",
      "parentUuid": "4f384514_57cac2a9",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 34,
        "endChar": 67
      },
      "revId": "e4b47576b17e094a3bfd64fef691b48be86e11d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55eb0bf7_0982b822",
        "filename": "kleaf/impl/ddk/ddk_uapi_headers.bzl",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-11-30T23:38:59Z",
      "side": 1,
      "message": "My mistake. glob() has allow_empty\u003dTrue by default.\n\nhttps://bazel.build/reference/be/functions#glob\n\nbut still, if it is valid to have an empty archive, I think the warning should be dropped because a user has no mechanism to silence this warning when they intend to create an empty archive. Creating another attribute just for this purpose seems too much.",
      "parentUuid": "fa9a9862_93ca4aa0",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 34,
        "endChar": 67
      },
      "revId": "e4b47576b17e094a3bfd64fef691b48be86e11d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f402b19d_b9903a25",
        "filename": "kleaf/impl/ddk/ddk_uapi_headers.bzl",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1965070
      },
      "writtenOn": "2023-11-30T23:49:18Z",
      "side": 1,
      "message": "Okay, sounds good. I\u0027ll drop this in next rev.",
      "parentUuid": "55eb0bf7_0982b822",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 34,
        "endChar": 67
      },
      "revId": "e4b47576b17e094a3bfd64fef691b48be86e11d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f39ce8b7_82c1e927",
        "filename": "kleaf/impl/ddk/ddk_uapi_headers.bzl",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1965070
      },
      "writtenOn": "2024-01-11T00:49:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f402b19d_b9903a25",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 34,
        "endChar": 67
      },
      "revId": "e4b47576b17e094a3bfd64fef691b48be86e11d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f63068a8_e2be04fe",
        "filename": "kleaf/impl/ddk/ddk_uapi_headers.bzl",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-11-30T22:40:10Z",
      "side": 1,
      "message": "```\n# Make unifdef, required by scripts/headers_install.sh\n```",
      "revId": "e4b47576b17e094a3bfd64fef691b48be86e11d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d71f0fe6_2bace905",
        "filename": "kleaf/impl/ddk/ddk_uapi_headers.bzl",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1965070
      },
      "writtenOn": "2023-11-30T23:07:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f63068a8_e2be04fe",
      "revId": "e4b47576b17e094a3bfd64fef691b48be86e11d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "942f6db9_3268745d",
        "filename": "kleaf/impl/ddk/ddk_uapi_headers.bzl",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-11-30T22:40:10Z",
      "side": 1,
      "message": "Is there a reason why we cannot use `make headers_install` just like kernel_uapi_headers?\n\nThe generated makefile can include a phony `headers_install` target if necessary.\n\nThe concern is that if Kbuild changes upstream, then we might also want to change this code, but we may miss that.",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 52,
        "endChar": 15
      },
      "revId": "e4b47576b17e094a3bfd64fef691b48be86e11d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04ec1fec_0558660c",
        "filename": "kleaf/impl/ddk/ddk_uapi_headers.bzl",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1965070
      },
      "writtenOn": "2023-11-30T23:07:42Z",
      "side": 1,
      "message": "The `make headers_install` target will install all headers from the kernel source tree (including arch-specific ones). As far as I can tell, the target isn\u0027t really configurable for different header sources. I agree with your sentiment, I\u0027m just not sure how to achieve it (unless we spoof a kernel tree with only the headers from `srcs` somehow).",
      "parentUuid": "942f6db9_3268745d",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 52,
        "endChar": 15
      },
      "revId": "e4b47576b17e094a3bfd64fef691b48be86e11d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a8b3493_9360083f",
        "filename": "kleaf/impl/ddk/ddk_uapi_headers.bzl",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-11-30T23:17:27Z",
      "side": 1,
      "message": "Technically, since this action runs in a sandbox, it\u0027ll only see inputs you give in `run_shell(inputs \u003d ...)`, so you are already \"spoof\"-ing the kernel tree.\n\nSo, the action should only see the headers listed in `srcs` and some arbitrary headers in $KERNEL_DIR (from ddk_config_env).",
      "parentUuid": "04ec1fec_0558660c",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 52,
        "endChar": 15
      },
      "revId": "e4b47576b17e094a3bfd64fef691b48be86e11d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7bd453c6_bff72777",
        "filename": "kleaf/impl/ddk/ddk_uapi_headers.bzl",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1965070
      },
      "writtenOn": "2023-11-30T23:26:05Z",
      "side": 1,
      "message": "Right, but the headers aren\u0027t in the kernel tree, so we\u0027d need to copy them there to \"pretend\" they\u0027re in tree for `make headers_install` to work, right?",
      "parentUuid": "5a8b3493_9360083f",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 52,
        "endChar": 15
      },
      "revId": "e4b47576b17e094a3bfd64fef691b48be86e11d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d246ad6_8e30b8f2",
        "filename": "kleaf/impl/ddk/ddk_uapi_headers.bzl",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-11-30T23:38:59Z",
      "side": 1,
      "message": "Maybe there are some Kbuild tricks to do to avoid copying? e.g. `make -C \u003cexternal directory\u003e M\u003d$(realpath \u003cexternal directory\u003e --relative-to $KERNEL_DIR)` (like how kernel_module handles it).\n\nI have zero idea whether this would work or not, though.\n\n\u003e we\u0027d need to copy them there to \"pretend\" they\u0027re in tree\n\nYou can do that because you are in the sandbox. Modifications don\u0027t affect the real tree. (Use `utils.check_sandbox_cmd()` to check at build time)\n\nAnd as a fallback, I am fine with your implementation right now. Just add some tests against `//common:kernel_*` to ensure that, if Kbuild changes (so the API for these scripts / binaries change), we get an early error and know we need to fix it.",
      "parentUuid": "7bd453c6_bff72777",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 52,
        "endChar": 15
      },
      "revId": "e4b47576b17e094a3bfd64fef691b48be86e11d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8b69bb3_d894e71f",
        "filename": "kleaf/impl/ddk/ddk_uapi_headers.bzl",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-11-30T23:40:20Z",
      "side": 1,
      "message": "Such tests should be added to `//common:kernel_aarch64_additional_tests` (and other archs). Once you add these \"integration\" tests to those test suites, our presubmit automatically catches any errors.",
      "parentUuid": "2d246ad6_8e30b8f2",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 52,
        "endChar": 15
      },
      "revId": "e4b47576b17e094a3bfd64fef691b48be86e11d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b5b7857_7f31349a",
        "filename": "kleaf/impl/ddk/ddk_uapi_headers.bzl",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1965070
      },
      "writtenOn": "2023-11-30T23:49:18Z",
      "side": 1,
      "message": "Yeah, the module method works because the kbuild provides that `M` flag for external directories. I don\u0027t see any such thing for the `headers_install` target. Everything looks to be set within this one file without ways to influence the inputs from the outside: https://cs.android.com/android/kernel/superproject/+/common-android-mainline:common/scripts/Makefile.headersinst\n\nI\u0027ll add an integration test for this as well. Still coming up to speed on the testing portion, so may be a day or two.",
      "parentUuid": "2d246ad6_8e30b8f2",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 52,
        "endChar": 15
      },
      "revId": "e4b47576b17e094a3bfd64fef691b48be86e11d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7b014f2_b8f4619b",
        "filename": "kleaf/impl/ddk/ddk_uapi_headers.bzl",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-12-01T00:03:28Z",
      "side": 1,
      "message": "\u003e I don\u0027t see any such thing for the `headers_install` target\n\nIf we were to go that route, then we\u0027ll need some patch to \"support make headers_install for external modules\". Assuming that the upstream will reject changes related to out-of-tree modules, this will be another `ANDROID:` patch. I agree that this is not ideal either.",
      "parentUuid": "2b5b7857_7f31349a",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 52,
        "endChar": 15
      },
      "revId": "e4b47576b17e094a3bfd64fef691b48be86e11d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7e1e64f7_21ebb207",
        "filename": "kleaf/impl/ddk/ddk_uapi_headers.bzl",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1965070
      },
      "writtenOn": "2024-01-11T00:49:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c7b014f2_b8f4619b",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 52,
        "endChar": 15
      },
      "revId": "e4b47576b17e094a3bfd64fef691b48be86e11d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1d27970_8e250295",
        "filename": "kleaf/impl/ddk/ddk_uapi_headers.bzl",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-11-30T22:40:10Z",
      "side": 1,
      "message": "nitty nit:\n\nCould there be a lot of headers (a very long list)?\n\nIf so, consider using args (untested)\n\n```\nargs \u003d ctx.actions.args()\nargs.use_param_file(\"%s\", use_always\u003dTrue)\n# note: you can avoid depset expansion by avoiding ctx.files.X!\nargs.add_all(depset(transitive \u003d [target.files for target in ctx.attr.srcs]))\n```\n\nthen in L68, add `arguments \u003d [args]` to `ctx.actions.run_shell()`\n\nthen in the shell script, `$1` is the file that contains all the srcs. You can use `while read hdr; do ; ...; done \u003c $1`\n\nThis avoids expanding the paths at analysis phase, so you don\u0027t get a super big shell script.\n\n---\n\nYou can also further optimize for the small case by using `args.use_param_file(\"--flagfile\u003d%s\", use_always\u003dFalse)` and parse for `--flagfile` in the script. If the flag is set, use its contents; otherwise use `$@` directly. (Python\u0027s absl lib already handles --flagfile, but we are using shell here, so you have to parse manually)",
      "range": {
        "startLine": 59,
        "startChar": 8,
        "endLine": 59,
        "endChar": 70
      },
      "revId": "e4b47576b17e094a3bfd64fef691b48be86e11d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2bd2ac3f_ee52e996",
        "filename": "kleaf/impl/ddk/ddk_uapi_headers.bzl",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1965070
      },
      "writtenOn": "2023-11-30T23:07:42Z",
      "side": 1,
      "message": "That\u0027s a great tip, will do it this way! I figure even in the small case using the param file wouldn\u0027t be that much overhead, so I think we can leave out the complexity of the flagfile parsing.",
      "parentUuid": "d1d27970_8e250295",
      "range": {
        "startLine": 59,
        "startChar": 8,
        "endLine": 59,
        "endChar": 70
      },
      "revId": "e4b47576b17e094a3bfd64fef691b48be86e11d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}