{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e083a3a4_93031b76",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2023-11-16T18:23:19Z",
      "side": 1,
      "message": "this seems to be a niche feature for addressing the case that external modules should not be signed while the kernel\u0027s modules are. Are there more use cases to this that it is worth to generalize the feature like this?",
      "revId": "c5d979e57b6261bab39659a8cf5ed683a360dca7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "799d9329_7879fb64",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2023-11-16T18:25:09Z",
      "side": 1,
      "message": "what about downstream `kernel_build`s that use this build as `base_kernel` ? Would that apply as well?",
      "revId": "c5d979e57b6261bab39659a8cf5ed683a360dca7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb2123b2_bace4e2f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-11-16T19:18:34Z",
      "side": 1,
      "message": "No as the change stands right now, but I would vote +1 to this idea.\n\nIf we do this, then the attribute should probably be named `kernel_build(dependent_target_defconfig_fragments)` (and note explicitly that this does not apply to legacy kernel_module)\n\n... or perhaps there is a way to propagate to dependent kernel_build and kernel_module too, by modifying the KernelBuildExtModuleInfo.ddk_config_env? @umendez@google.com can you see if this is feasible?",
      "parentUuid": "799d9329_7879fb64",
      "revId": "c5d979e57b6261bab39659a8cf5ed683a360dca7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5aaa1bfb_5733c1be",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-11-16T19:18:34Z",
      "side": 1,
      "message": "No.\n\nHowever, note how defconfig\u0027s propagate for ddk_modules:\n\nif ddk_module A has defconfig\u003dconfig_A, then a ddk_module B that depends on A will automatically get config_A.\n\nkernel_build.defconfig_fragments also universally apply to all dependencies (kernel_module and ddk_module, though I am not sure about kernel_build.base_kernel).\n\nThis attribute (whatever the name is) aims to set defconfig fragments for dependencies BUT NOT ITSELF. I think the two counterparts above justifies the generalization here.",
      "parentUuid": "e083a3a4_93031b76",
      "revId": "c5d979e57b6261bab39659a8cf5ed683a360dca7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6cac68da_baf19b0e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2023-11-23T14:52:04Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "5aaa1bfb_5733c1be",
      "revId": "c5d979e57b6261bab39659a8cf5ed683a360dca7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e44c7b3a_b649fabc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1961395
      },
      "writtenOn": "2024-01-23T17:37:42Z",
      "side": 1,
      "message": "Update: Talked offline and agreed that `ddk_config_env` only applies to DDK modules, so a different approach is needed for the dependent builds and/or kernel_modules, which I\u0027m planning to implement in a different CL, but along the current series, so this is blocked for now.",
      "parentUuid": "eb2123b2_bace4e2f",
      "revId": "c5d979e57b6261bab39659a8cf5ed683a360dca7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f916836a_e856d2d4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1961395
      },
      "writtenOn": "2024-02-14T17:13:50Z",
      "side": 1,
      "message": "Acknowledged. Will move on with this change, and if the general solution is later found it can replace this one if needed.",
      "parentUuid": "e44c7b3a_b649fabc",
      "revId": "c5d979e57b6261bab39659a8cf5ed683a360dca7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7573c16f_26144491",
        "filename": "kleaf/impl/common_providers.bzl",
        "patchSetId": 6
      },
      "lineNbr": 220,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2023-11-16T18:23:19Z",
      "side": 1,
      "message": "does this apply to only DDK modules? what about modules defined with `kernel_module`?",
      "range": {
        "startLine": 220,
        "startChar": 9,
        "endLine": 220,
        "endChar": 39
      },
      "revId": "c5d979e57b6261bab39659a8cf5ed683a360dca7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "980929aa_98794377",
        "filename": "kleaf/impl/common_providers.bzl",
        "patchSetId": 6
      },
      "lineNbr": 220,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-11-16T19:18:34Z",
      "side": 1,
      "message": "Only to ddk_modules. kernel_modules use their own Kbuild / Makefile\u0027s (not the one we generate), so we can\u0027t inject defconfig fragments.\n\nHence the name.\n\n(but see my other comment; perhaps there is a way to do this by modifying ddk_config_env)",
      "parentUuid": "7573c16f_26144491",
      "range": {
        "startLine": 220,
        "startChar": 9,
        "endLine": 220,
        "endChar": 39
      },
      "revId": "c5d979e57b6261bab39659a8cf5ed683a360dca7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e6222a1_76afd1f2",
        "filename": "kleaf/impl/common_providers.bzl",
        "patchSetId": 6
      },
      "lineNbr": 220,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2023-11-23T14:52:04Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "980929aa_98794377",
      "range": {
        "startLine": 220,
        "startChar": 9,
        "endLine": 220,
        "endChar": 39
      },
      "revId": "c5d979e57b6261bab39659a8cf5ed683a360dca7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23435255_0ffd6b2a",
        "filename": "kleaf/impl/ddk/ddk_config.bzl",
        "patchSetId": 6
      },
      "lineNbr": 253,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-11-16T18:19:06Z",
      "side": 1,
      "message": "question: Is this always a `depset()` or could this be `None`? If `None` then you can\u0027t put it into the depset (because of incompatible types).\n\nalso: line length (put it in a separate variable like you have in PS5)",
      "range": {
        "startLine": 253,
        "startChar": 134,
        "endLine": 253,
        "endChar": 164
      },
      "revId": "c5d979e57b6261bab39659a8cf5ed683a360dca7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7bc60ebc_b9997967",
        "filename": "kleaf/impl/ddk/ddk_config.bzl",
        "patchSetId": 6
      },
      "lineNbr": 253,
      "author": {
        "id": 1961395
      },
      "writtenOn": "2024-02-14T17:13:50Z",
      "side": 1,
      "message": "`KernelBuildExtModuleInfo` is only populated in two places, in `kernel_build` and `kernel_filegroup` both covered in this CL. It should never be `None`.",
      "parentUuid": "23435255_0ffd6b2a",
      "range": {
        "startLine": 253,
        "startChar": 134,
        "endLine": 253,
        "endChar": 164
      },
      "revId": "c5d979e57b6261bab39659a8cf5ed683a360dca7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}