{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6c542e03_a22b1f4d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-02-17T00:26:54Z",
      "side": 1,
      "message": "wrong bug?",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 21,
        "endChar": 14
      },
      "revId": "1cbd7f9716e57aed921a9d9743060663db4b4f41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac9daf53_2979b802",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-02-17T01:11:27Z",
      "side": 1,
      "message": "268688666",
      "parentUuid": "6c542e03_a22b1f4d",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 21,
        "endChar": 14
      },
      "revId": "1cbd7f9716e57aed921a9d9743060663db4b4f41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb16e826_4b09504f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1889091
      },
      "writtenOn": "2023-02-16T21:34:40Z",
      "side": 1,
      "message": "Hi John:\n\nThanks for the patch.\n\nThe reason we don\u0027t have this infrastructure as we don\u0027t support signing the vendor modules[1][2]. Can you explain why do you need this?\n\nWe need to make sure this doesn\u0027t pave a way for the vendor to bypass GKI modules feature as signed modules which can be verified using the kernel\u0027s key ring will have the unrestricted access to runtime.\n\nCR-1 until we know more.\n\n[1]: https://source.android.com/docs/core/architecture/kernel/loadable-kernel-modules#module-signing\n[2]: https://docs.partner.android.com/partners/guides/gki/whatsnew#2022-jan-21\n\nThanks,\nRamji",
      "revId": "1cbd7f9716e57aed921a9d9743060663db4b4f41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3379088c_3a8da91c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1889091
      },
      "writtenOn": "2023-02-16T21:37:38Z",
      "side": 1,
      "message": "Markdown ate the links (Reposting links):\n\n- https://docs.partner.android.com/partners/guides/gki/whatsnew#2022-jan-21\n- https://source.android.com/docs/core/architecture/kernel/loadable-kernel-modules#module-signing",
      "parentUuid": "bb16e826_4b09504f",
      "revId": "1cbd7f9716e57aed921a9d9743060663db4b4f41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6816cc7_30542519",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1965070
      },
      "writtenOn": "2023-02-16T21:59:03Z",
      "side": 1,
      "message": "Hi Ramji, as we understand it, Kleaf is not an Android-specific framework. We have several non-GKI targets we\u0027re planning on using Kleaf to build and would want to be able to sign the modules for them. At least until this point, Kleaf has been able to satisfy all of the needs of our non\u003dGKI targets.\n\nCan we clarify Google\u0027s intention here?",
      "parentUuid": "3379088c_3a8da91c",
      "revId": "1cbd7f9716e57aed921a9d9743060663db4b4f41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8f123bed_11d76532",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-02-17T00:23:20Z",
      "side": 1,
      "message": "LGTM implementation-wise. Ramji / John, please discuss in the bug to seek agreement in this issue.",
      "revId": "1cbd7f9716e57aed921a9d9743060663db4b4f41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7069fc3_ee61e232",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-02-17T00:25:47Z",
      "side": 1,
      "message": "Implementation is okay from Kleaf\u0027s perspective. Policy-wise, Ramji has the authority here. I\u0027ll leave this to Ramji.",
      "parentUuid": "a6816cc7_30542519",
      "revId": "1cbd7f9716e57aed921a9d9743060663db4b4f41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be2ac3d7_a84aedcc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1889091
      },
      "writtenOn": "2023-02-17T01:23:59Z",
      "side": 1,
      "message": "Thanks John: `kleaf` is Android Kernel specific framework; but yes not only GKI specific. So, if you are using it for non-GKI targets with Android Kernel; we need to accommodate this.\n\n@elsk@google.com: Is it possible to have this option only available for non-GKI targets? May be based on whether `base_kernel` is set or not?",
      "parentUuid": "c7069fc3_ee61e232",
      "revId": "1cbd7f9716e57aed921a9d9743060663db4b4f41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd303fba_e913c891",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-02-17T01:34:50Z",
      "side": 1,
      "message": "When you say \"non-GKI\", do you mean devices that doesn\u0027t use GKI, or device targets that uses GKI but not the GKI targets themselves? There are several types of \"targets\":\n\n- GKI: e.g. `//common:kernel_aarch64`\n- Devices using GKI, e.g. `//common-modules/virtual-device:virtual_device_aarch64`\n- Some targets that doesn\u0027t have a base kernel, e.g. `//common:fips140`\n- Some targets that does have a base kernel, but it is not GKI; e.g. a work-in-progress device that uses a staging kernel with some custom patches.",
      "parentUuid": "be2ac3d7_a84aedcc",
      "revId": "1cbd7f9716e57aed921a9d9743060663db4b4f41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5c4f308_2ef18fd5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1889091
      },
      "writtenOn": "2023-02-17T06:50:55Z",
      "side": 1,
      "message": "Generalized way to do this is if there is an ABI symbol list i.e. KMI defined for the target, it shouldn\u0027t have the custom module signing keys or custom\nsystem trusted keys as that covers the GKI targets both in terms of common kernels or device kernels which are suppose to use the GKI as it\u0027s kernel image.\n\nI don\u0027t have any objection to merge this patch and add restriction later as long as there is an understanding that we will add such restriction just to make sure it doesn\u0027t pave a way to replace keys for GKI builds. Overall, it\u0027s nice clean implementation.\n\nJohn - Will such restriction be any issue with the non-GKI target you are referring here which uses ACKs source and kleaf to build?",
      "parentUuid": "fd303fba_e913c891",
      "revId": "1cbd7f9716e57aed921a9d9743060663db4b4f41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b13dde09_1a7bbd35",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2023-02-17T12:39:03Z",
      "side": 1,
      "message": "(I like the thought of considering Kleaf GKI agnostic if not even Android agnostic. It sure isn\u0027t fully right now though. Thanks for the input that Kleaf is used beyond what we had in scope ðŸ˜Š)\n\nWe do not have a notion of what exactly is a GKI kernel in the build. Rather the other way around: we declare the result of `//common:kernel_aarch64` the GKI kernel. I don\u0027t think we need to restrict this feature based on some assumptions like the presence of symbol lists. This just adds complexity and hidden magic. Further it unnecessarily restricts the use of Kleaf in GKI-like use cases. Incompatibilities of generic technical features (symbol lists + mod sign key) should be driven by technical need, not by policy.\n\nI also do not see the risk of accidentally passing a custom signing key to GKI kernels that we would later release. We would simply not define this for `//common:kernel_aarch64`.",
      "parentUuid": "c5c4f308_2ef18fd5",
      "revId": "1cbd7f9716e57aed921a9d9743060663db4b4f41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aaa9f31d_e36c67f5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1889091
      },
      "writtenOn": "2023-02-17T18:22:57Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "b13dde09_1a7bbd35",
      "revId": "1cbd7f9716e57aed921a9d9743060663db4b4f41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d696ae2_93ce703d",
        "filename": "kleaf/impl/kernel_build.bzl",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2023-02-17T12:39:03Z",
      "side": 1,
      "message": "please move the arguments further down. Currently they are inserted between other arguments that belong together (`kmi_symbol_list` and `additional_kmi_symbol_lists`).",
      "revId": "1cbd7f9716e57aed921a9d9743060663db4b4f41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6de737e1_115511c7",
        "filename": "kleaf/impl/kernel_build.bzl",
        "patchSetId": 2
      },
      "lineNbr": 428,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2023-02-17T12:39:03Z",
      "side": 1,
      "message": "`module_sign_key` or `module_signing_key` would be my preferred choice as it more accurately describes what it is used for.",
      "range": {
        "startLine": 428,
        "startChar": 8,
        "endLine": 428,
        "endChar": 22
      },
      "revId": "1cbd7f9716e57aed921a9d9743060663db4b4f41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd218ad9_c9cfe200",
        "filename": "kleaf/impl/kernel_config.bzl",
        "patchSetId": 2
      },
      "lineNbr": 79,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-02-17T00:23:20Z",
      "side": 1,
      "message": "nit: could you please refactor the code to deduplicate the logic with _determine_raw_symbollist_path? This helps not duplicating the chunk L40~L58.",
      "range": {
        "startLine": 79,
        "startChar": 4,
        "endLine": 79,
        "endChar": 34
      },
      "revId": "1cbd7f9716e57aed921a9d9743060663db4b4f41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b5b051d_867f80b2",
        "filename": "kleaf/impl/kernel_config.bzl",
        "patchSetId": 2
      },
      "lineNbr": 79,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-02-17T00:28:47Z",
      "side": 1,
      "message": "Just a nit though; feel free not to deduplicate the code and just link to the comment, e.g. add\n\n```\n# See _determine_raw_symbollist_path for details\n```\n\nto L81",
      "parentUuid": "cd218ad9_c9cfe200",
      "range": {
        "startLine": 79,
        "startChar": 4,
        "endLine": 79,
        "endChar": 34
      },
      "revId": "1cbd7f9716e57aed921a9d9743060663db4b4f41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4c82e3f_c298553e",
        "filename": "kleaf/impl/kernel_config.bzl",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2023-02-17T12:39:03Z",
      "side": 1,
      "message": "Can we de-duplicate this code by using a common helper function?",
      "revId": "1cbd7f9716e57aed921a9d9743060663db4b4f41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffe41362_71426e78",
        "filename": "kleaf/impl/kernel_config.bzl",
        "patchSetId": 2
      },
      "lineNbr": 219,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2023-02-17T12:39:03Z",
      "side": 1,
      "message": "Note that by embedding the absolute (system) path into the binary, the resulting build becomes indeterministic and the path leaks into the binary. It can be discovered with `strings` or even by inspecting the kernel config from the binary.\n\nWe have a similar issue with `CONFIG_UNUSED_KSYMS_WHITELIST` where we leak an absolute path into the binary. That we need to address as well.",
      "revId": "1cbd7f9716e57aed921a9d9743060663db4b4f41",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}