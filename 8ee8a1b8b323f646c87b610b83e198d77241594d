{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fe20c126_18a8171e",
        "filename": "BUILD.bazel",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1066075
      },
      "writtenOn": "2021-06-21T15:58:03Z",
      "side": 1,
      "message": "Why is this necessary, as opposed to calling these tools using their basenames and keeping them in $PATH? Is this in preparation for remoting the actions that use them?",
      "range": {
        "startLine": 14,
        "startChar": 3,
        "endLine": 14,
        "endChar": 76
      },
      "revId": "8ee8a1b8b323f646c87b610b83e198d77241594d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a479845_f9eb6d33",
        "filename": "BUILD.bazel",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2021-06-21T16:28:10Z",
      "side": 1,
      "message": "In the kernel build we disallow any PATH other than the predefined ones (even /usr/bin and /bin are not ok). The host tools bypass this by adding symbolic links and adding the directory they are contained in to PATH. In order to keep them in PATH, we need to create and contain those symbolic links. And this is what this rule does.\n\nThis somewhat also works around how host-tools are currently implemented in the underlying build scripts (they are copied to the out_dir, which obviously is cleaned for every rule in bazel and that mechanism therefore does not work).",
      "parentUuid": "fe20c126_18a8171e",
      "range": {
        "startLine": 14,
        "startChar": 3,
        "endLine": 14,
        "endChar": 76
      },
      "revId": "8ee8a1b8b323f646c87b610b83e198d77241594d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "900524d9_c5ed09f4",
        "filename": "BUILD.bazel",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-06-21T20:29:39Z",
      "side": 1,
      "message": "Can this list be interpreted as an allowlist of tools that can be referred from the environment? And other tools outside of this list must be self-contained under the kernel tree, either as a prebuilt or are built from source? So in a way, this is similar to [1] in Android build, right?\n\nCan this list be expanded in the future? Or, are items this list going to be cleaned up?\n\nhttps://cs.android.com/android/platform/superproject/+/master:build/soong/ui/build/path.go",
      "parentUuid": "9a479845_f9eb6d33",
      "range": {
        "startLine": 14,
        "startChar": 3,
        "endLine": 14,
        "endChar": 76
      },
      "revId": "8ee8a1b8b323f646c87b610b83e198d77241594d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8cbbb5d_a9f4eaea",
        "filename": "BUILD.bazel",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-06-21T20:32:47Z",
      "side": 1,
      "message": "And the list in Android I am referring to:\n\nhttps://cs.android.com/android/platform/superproject/+/master:build/soong/ui/build/paths/config.go",
      "parentUuid": "900524d9_c5ed09f4",
      "range": {
        "startLine": 14,
        "startChar": 3,
        "endLine": 14,
        "endChar": 76
      },
      "revId": "8ee8a1b8b323f646c87b610b83e198d77241594d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "09950e4d_7b252419",
        "filename": "BUILD.bazel",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2021-06-21T21:45:45Z",
      "side": 1,
      "message": "Yes, this is a very precise equivalent. We do this for a while for the hermetic kernel builds, and this patch makes it work through bazel without having to touch build.sh.",
      "parentUuid": "b8cbbb5d_a9f4eaea",
      "range": {
        "startLine": 14,
        "startChar": 3,
        "endLine": 14,
        "endChar": 76
      },
      "revId": "8ee8a1b8b323f646c87b610b83e198d77241594d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}