{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e8362d57_03c08906",
        "filename": "kleaf/common_kernels.bzl",
        "patchSetId": 8
      },
      "lineNbr": 101,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-01-05T16:00:13Z",
      "side": 1,
      "message": "the existence of those seems to depend on a configuration option. Is this option set on all android13+ branches and mainline? Otherwise we possibly need to parametrize the call to define_common_kernels() to reflect differences. I would prefer if we just have the same support on all branches though and do not need to parametrize it. Yet, a comment would be good to have here to explain where these files are coming from.",
      "revId": "7bc9a8be08d372eb4d56096af3543de5def24c1f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c33061c1_ab6e2d68",
        "filename": "kleaf/common_kernels.bzl",
        "patchSetId": 8
      },
      "lineNbr": 101,
      "author": {
        "id": 1889091
      },
      "writtenOn": "2022-01-05T23:58:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e8362d57_03c08906",
      "revId": "7bc9a8be08d372eb4d56096af3543de5def24c1f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78bf6903_3fcea85a",
        "filename": "kleaf/common_kernels.bzl",
        "patchSetId": 8
      },
      "lineNbr": 126,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-01-05T16:00:13Z",
      "side": 1,
      "message": "this is empty, do we need it? is this perhaps a preparation for a later change and just misses a TODO?",
      "range": {
        "startLine": 121,
        "startChar": 0,
        "endLine": 126,
        "endChar": 15
      },
      "revId": "7bc9a8be08d372eb4d56096af3543de5def24c1f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "caead247_eab49959",
        "filename": "kleaf/common_kernels.bzl",
        "patchSetId": 8
      },
      "lineNbr": 126,
      "author": {
        "id": 1889091
      },
      "writtenOn": "2022-01-05T23:58:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "78bf6903_3fcea85a",
      "range": {
        "startLine": 121,
        "startChar": 0,
        "endLine": 126,
        "endChar": 15
      },
      "revId": "7bc9a8be08d372eb4d56096af3543de5def24c1f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32dfacc3_55e70440",
        "filename": "kleaf/kernel.bzl",
        "patchSetId": 8
      },
      "lineNbr": 1944,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-01-05T16:00:13Z",
      "side": 1,
      "message": "You can inline this later, no need for this local variable.",
      "range": {
        "startLine": 1942,
        "startChar": 0,
        "endLine": 1944,
        "endChar": 5
      },
      "revId": "7bc9a8be08d372eb4d56096af3543de5def24c1f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "875ffbe7_143bcc0f",
        "filename": "kleaf/kernel.bzl",
        "patchSetId": 8
      },
      "lineNbr": 1944,
      "author": {
        "id": 1889091
      },
      "writtenOn": "2022-01-05T23:58:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "32dfacc3_55e70440",
      "range": {
        "startLine": 1942,
        "startChar": 0,
        "endLine": 1944,
        "endChar": 5
      },
      "revId": "7bc9a8be08d372eb4d56096af3543de5def24c1f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f51a7883_e29df919",
        "filename": "kleaf/kernel.bzl",
        "patchSetId": 8
      },
      "lineNbr": 1991,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-01-05T16:00:13Z",
      "side": 1,
      "message": "where is this provider used?",
      "revId": "7bc9a8be08d372eb4d56096af3543de5def24c1f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9ad7ade_42b716ff",
        "filename": "kleaf/kernel.bzl",
        "patchSetId": 8
      },
      "lineNbr": 1991,
      "author": {
        "id": 1889091
      },
      "writtenOn": "2022-01-05T23:58:52Z",
      "side": 1,
      "message": "Not really anywhere. Actually, I did not even know what is provider when I did this :). Keeping it as of now until comments regarding building system_dlkm build with build boot image gets resolved as that may end up being the user.",
      "parentUuid": "f51a7883_e29df919",
      "revId": "7bc9a8be08d372eb4d56096af3543de5def24c1f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aee0c618_aaa1fb84",
        "filename": "kleaf/kernel.bzl",
        "patchSetId": 8
      },
      "lineNbr": 1991,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-01-06T09:51:44Z",
      "side": 1,
      "message": "A provider is basically a struct that is passed from rule to rule along dependencies. Let\u0027s not proactively create them for cases that we might need them.\n\nhttps://docs.bazel.build/versions/main/skylark/lib/Provider.html",
      "parentUuid": "c9ad7ade_42b716ff",
      "revId": "7bc9a8be08d372eb4d56096af3543de5def24c1f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2cb16914_97dc94cd",
        "filename": "kleaf/kernel.bzl",
        "patchSetId": 8
      },
      "lineNbr": 2310,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-01-05T16:00:13Z",
      "side": 1,
      "message": "is this not failing if somebody does build_boot_images\u003dTrue, build_system_dlkm\u003dFalse ? i.e. if somebody only wants the initramfs?\n\nrather append to this list later (+15 lines) and also adjust the initramfs block accordingly?",
      "revId": "7bc9a8be08d372eb4d56096af3543de5def24c1f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e377d61_23c20b66",
        "filename": "kleaf/kernel.bzl",
        "patchSetId": 8
      },
      "lineNbr": 2310,
      "author": {
        "id": 1889091
      },
      "writtenOn": "2022-01-05T23:58:52Z",
      "side": 1,
      "message": "I did not think about this enough in the past; but\n\nbuild_system_dlkm must only be set from the common kernel builds. If we set build_boot_images for common kernel build it should fail anyway because of dtb.img dependencies are missing.\n\nDo I need to remove building system_dlkm.img with build_boot_images \u003d True in this case?",
      "parentUuid": "2cb16914_97dc94cd",
      "revId": "7bc9a8be08d372eb4d56096af3543de5def24c1f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f34bffa1_059ef6d6",
        "filename": "kleaf/kernel.bzl",
        "patchSetId": 8
      },
      "lineNbr": 2310,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-01-06T04:14:55Z",
      "side": 1,
      "message": "If it should only be set for common kernel builds, it should be by default false, and explicitly set to true in common_kernels.bzl.",
      "parentUuid": "9e377d61_23c20b66",
      "revId": "7bc9a8be08d372eb4d56096af3543de5def24c1f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab22ebbd_6aa73651",
        "filename": "kleaf/kernel.bzl",
        "patchSetId": 8
      },
      "lineNbr": 2310,
      "author": {
        "id": 1402878
      },
      "writtenOn": "2022-01-06T09:51:44Z",
      "side": 1,
      "message": "My comment was rather that we need to support all combinations of booleans parameters or check and fail for the unsupported cases.",
      "parentUuid": "f34bffa1_059ef6d6",
      "revId": "7bc9a8be08d372eb4d56096af3543de5def24c1f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}