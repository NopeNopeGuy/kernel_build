#! /bin/sh
# SPDX-License-Identifier: GPL-2.0
#
# (c) 2020, Google
LANG=C
progname="${0##*/}"

# A _real_ embedded escape character
ESCAPE="`echo | tr '\n' '\033'`"
# Colours
RED="${ESCAPE}[38;5;196m"
NORMAL="${ESCAPE}[0m"

USAGE="${RED}USAGE${NORMAL}: ${progname} [-h|--help] \\
           [filename|< filename]

Canonicalize various forms of genksym outputs.

If filename is of form *.symtypes, then will expand that format, otherwise the
genksym dump format (willmcvicker@google.com).  If no filename supplied, will
assume genksym dump format."

filename=${1:--}
if [ -n "${1}" ]; then
  shift
fi

[ "filter_symtypes < stdin > stdout

replace all tags into function output" ]
filter_symtypes() {
  sed --file ${TMP}first.sed |
    sed --null-data --file ${TMP}second.sed |
    tr '\0' '\n' |
    sed --file ${TMP}third.sed |
    sed --file ${TMP}third.sed |
    sed --file ${TMP}third.sed |
    sed --file ${TMP}third.sed |
    sed --file ${TMP}third.sed
}

[ "filter_ksyms < stdin > stdout

find ksyms, strip out unfortunate build status" ]
filter_ksyms() {
  sed --silent \
      '/^Export [_a-zA-Z][_a-zA-Z0-9]* == / {
         s@^@// @
         : loop
         N
         /\n>$/ b skip
         b loop
         : skip
         s@  *\(AR\|CC\|AS\|VERIFY\) \([[]M[]]\)\{0,1\} *[a-zA-Z][-._/a-zA-Z0-9]* *\n@ @g
         s/Warning (reg_format):[^\n]*\n//g
         s@[+][+][+] module_layout@// &@g
         p
       }'
}

[ "find_symtypes < stdin > stdout

replaced struct and type refs with a sed script to replace all references" ]
find_symtypes() {
  sed --silent 's@^\([estuE]#[^ ]* \)\(.*\)$@s\@\1\@\2\@@p'
}

restore_symtypes() {
  sed 's/\([estuE]\) #/\1#/g'
}

TMP=
filter=filter_ksyms
cleanup=
if [ X"${filename}" != X"${filename%.symtypes}" ]; then
  TMP=`mktemp -d`/
  filter=filter_symtypes
  cleanup="rm -rf ${TMP}"
  trap "${cleanup} ; exit 1" 1 2 3 15
  (
    set +x
    find_symtypes < ${filename} |
      tee ${TMP}second.sed |
      tee /dev/stderr |
      sed '/ {/ {
             s@  *{.*@\@g@
             b exit
           }
           {
             s@\@$@\@g@
           }
           : exit' >${TMP}third.sed
  ) 2>&1 |
    sed 's@^s\@\(.*\)\@.*\@$@/^\1/d@' >${TMP}first.sed
fi

[ "sed_format < stdin > stdout

Three sed threads
  1) Add newlines
  2) Add indent
  3) Squash single-entry { } into one line (pretty) " ]
sed_format() {
  sed 's/\( [{;,]\) /\1|/g' |
  tr '|' '\n' |
  sed --silent \
      '/^ *}/ {
         x
         s/ $//
         x
       }
       {
         x
         G
         s/\n//
         p
         s/^\( *\)[^ ].*/\1/
         x
       }
       /[^ ] *}/ {
         x
         s/ $//
         x
       }
       /{$/ {
         x
         s/$/ /
         x
       }' |
  sed '/{$/ {
         : loop
         N
         /{$/ {
           h
           s/\n.*//
           p
           g
           s/.*\n//
           b loop
         }
         s/{\n *\(UNKNOWN\) }/{ \1 }/
         t exit
         / [;,]$/ {
           N
           /{$/ {
             h
             s/\n[^\n]*$//
             p
             g
             s/.*\n//
             b loop
           }
           s/{\n *\(.* [;,]\)\n *}/{ \1 }/
         }
       }
       : exit'
}

[ "clang_format < stdin > stdout

  Find ksyms, strip out unfortunate build status, add newlines, add indent" ]
clang_format() {
  clang-format --style=LLVM --assume-filename=${filename%.symtypes}.c
}

format="`which clang-format`"
if [ -n "${format}" ]; then
  format=clang_format
else
  format=sed_format
fi

cat ${filename:-} |
  ${filter} |
  ${format} |
  restore_symtypes

${cleanup}
