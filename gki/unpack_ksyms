#! /bin/sh
# SPDX-License-Identifier: Apache-2.0
#
# (c) 2020, Google
LANG=C
progname="${0##*/}"

# A _real_ embedded escape character
ESCAPE="`echo | tr '\n' '\033'`"
# Colours
RED="${ESCAPE}[38;5;196m"
NORMAL="${ESCAPE}[0m"

USAGE="${RED}USAGE${NORMAL}: ${progname} [-h|--help] [--symtypes] [--no-clang-format]\\
           [filename|< filename]

Canonicalize various forms of genksym data into an easier to grok content.

If filename is of form *.symtypes, then will expand that format, otherwise the
genksym dump format (willmcvicker@google.com).  If no filename supplied, will
assume genksym dump format."

filename=-
symtypes=false
format="`which clang-format`"
if [ -n "${format}" ]; then
  format=clang_format
else
  format=sed_format
fi

while [ ${#} -gt 0 ]; do
  case ${1} in
    --no-clang-format)
      format=sed_format
      ;;
    -H | -h | -\? | --help) # -H is only for hardening against humans
      echo "${USAGE}" >&2
      exit
      ;;
    --symtypes)
      symtypes=true
      ;;
    *)
      if [ X"${1}" != X"-" -a ! -s "${1}" ]; then
        echo "${RED}[    ERROR ]${NORMAL} Failed to open ${1}" >&2
        echo >&2
        echo "${USAGE}" >&2
        exit 1
      fi
      if [ X"${1}" != X"-" -a X"${filename}" != X"-" ]; then
        echo "${RED}[    ERROR ]${NORMAL} Multiple files specified ${filename} ${1}" >&2
        echo >&2
        echo "${USAGE}" >&2
        exit 1
      fi
      filename=${1}
      if [ X"${filename}" != X"${filename%.symtypes}" ]; then
        symtypes=true
      fi
      ;;
  esac
  shift
done

[ "filter_symtypes < stdin > stdout

replace all tags into function output which will restore to the crc'd string" ]
filter_symtypes() {
  sed --file ${TMP}first.sed |
    sed --null-data --file ${TMP}second.sed |
    tr '\0' '\n' |
    sed --file ${TMP}third.sed |
    sed --file ${TMP}third.sed |
    sed --file ${TMP}third.sed |
    sed --file ${TMP}third.sed |
    sed --file ${TMP}third.sed
}

[ "filter_ksyms < stdin > stdout

find ksyms, strip out unfortunate build status mixed in content" ]
filter_ksyms() {
  sed --silent \
      '/^Export [_a-zA-Z][_a-zA-Z0-9]* == / {
         s@^@// @
         : loop
         N
         /\n>$/ b skip
         b loop
         : skip
         s@  *\(AR\|CC\|AS\|VERIFY\) \([[]M[]]\)\{0,1\} *[a-zA-Z][-._/a-zA-Z0-9]* *\n@ @g
         s/Warning (reg_format):[^\n]*\n//g
         s/Warning (avoid_default_addr_size):[^\n]*\n//g
         s@[+][+][+] module_layout@// &@g
         p
       }'
}

[ "find_symtypes < stdin > stdout

replaced struct and type refs with a sed script to replace all references" ]
find_symtypes() {
  sed --silent 's@^\([estuE]#[^ ]* \)\(.*\)$@s\@\1\@\2\@@p'
}

[ "restore_symtypes < stdin > stdout

clang-format damages <letter>#<name>, restore the tag so it is clear" ]
restore_symtypes() {
  if ${symtypes}; then
    sed 's/\([estuE]\) #/\1#/g'
  else
    sed 's@// @@g'
  fi
}

TMP=
filter=filter_ksyms
cleanup=
if ${symtypes}; then
  TMP=`mktemp -d`/
  filter=filter_symtypes
  cleanup="rm -rf ${TMP}"
  trap "${cleanup} ; exit 1" 1 2 3 15
  (
    #
    # sh -x makes a mockery of the following as we use stderr to tee and
    # parallelise the filters to each of the three sed scripts.
    #
    set +x
    (
      find_symtypes < ${filename} 2>/dev/null |
        tee ${TMP}second.sed |
        tee /dev/stderr |
        sed '/ {/ {
               s@  *{.*@\@g@
               b exit
             }
             {
               s@\@$@\@g@
             }
             : exit' >${TMP}third.sed
    ) 2>&1 |
      sed 's@^s\@\(.*\)\@.*\@$@/^\1/d@' >${TMP}first.sed
  )
fi

[ "sed_format < stdin > stdout

Three sed threads
  1) Add newlines
  2) Add indent
  3) Squash single-entry { } into one line (pretty)

This does roughly the same thing +/- as clang format, except single character
indent.  Acts as a backup should the developer not have that clang tools handy
on their host system." ]
sed_format() {
  indent=" "
  sed 's/\( [{;,]\) /\1|/g' |
  tr '|' '\n' |
  sed --silent \
      "/^ *}/ {
         x
         s/${indent}\$//
         x
       }
       {
         x
         G
         s/\n//
         p
         s/^\( *\)[^ ].*/\1/
         x
       }
       /[^ ] *}/ {
         x
         s/${indent}\$//
         x
       }
       /{\$/ {
         x
         s/\$/${indent}/
         x
       }" |
  sed '/{$/ {
         : loop
         N
         /{$/ {
           h
           s/\n.*//
           p
           g
           s/.*\n//
           b loop
         }
         s/{\n *\(UNKNOWN\) }/{ \1 }/
         t exit
         / [;,]$/ {
           N
           /{$/ {
             h
             s/\n[^\n]*$//
             p
             g
             s/.*\n//
             b loop
           }
           s/{\n *\(.* [;,]\)\n *}/{ \1 }/
         }
       }
       : exit'
}

[ "clang_format < stdin > stdout

add newlines, add 2 character indent" ]
clang_format() {
  clang-format --style=LLVM --assume-filename=${filename%.symtypes}.c
}

cat ${filename} |
  ${filter} |
  ${format} |
  restore_symtypes

${cleanup}
